From: Graeme Foot <graeme.foot@touchcut.com>
Date: Tue, 21 Nov 2018 11:29:17 +1200

Slaves can fail to read their SII information, leading to
zero vendor id, product code and alias information.

This patch retries scanning the slave from scratch if there are
any problems reading the SII information.

diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -42,6 +42,15 @@
 
 #include "fsm_slave_scan.h"
 
+/** Time to wait before slave scan retry [ms].
+ *
+ * Used to calculate time based on the jiffies counter.
+ *
+ * \attention Must be more than 10 to avoid problems on kernels that run with
+ * a timer interupt frequency of 100 Hz.
+ */
+#define SCAN_RETRY_TIME 100
+
 /*****************************************************************************/
 
 void ec_fsm_slave_scan_state_start(ec_fsm_slave_scan_t *, ec_datagram_t *);
@@ -74,6 +83,8 @@ void ec_fsm_slave_scan_state_pdos(ec_fsm
 
 void ec_fsm_slave_scan_state_end(ec_fsm_slave_scan_t *, ec_datagram_t *);
 void ec_fsm_slave_scan_state_error(ec_fsm_slave_scan_t *, ec_datagram_t *);
+void ec_fsm_slave_scan_state_retry(ec_fsm_slave_scan_t *, ec_datagram_t *);
+void ec_fsm_slave_scan_state_retry_wait(ec_fsm_slave_scan_t *, ec_datagram_t *);
 
 void ec_fsm_slave_scan_enter_datalink(ec_fsm_slave_scan_t *, ec_datagram_t *);
 #ifdef EC_REGALIAS
@@ -132,6 +143,7 @@ void ec_fsm_slave_scan_start(
         ec_fsm_slave_scan_t *fsm /**< slave state machine */
         )
 {
+    fsm->scan_retries = EC_FSM_RETRIES;
     fsm->state = ec_fsm_slave_scan_state_start;
 }
 
@@ -765,9 +777,13 @@ void ec_fsm_slave_scan_state_sii_identit
             return;
 
         if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
-            fsm->slave->error_flag = 1;
-            fsm->state = ec_fsm_slave_scan_state_error;
             EC_SLAVE_ERR(slave, "Failed to determine SII identity\n");
+            if (fsm->scan_retries--) {
+                fsm->state = ec_fsm_slave_scan_state_retry;
+            } else {
+                fsm->slave->error_flag = 1;
+                fsm->state = ec_fsm_slave_scan_state_error;
+            }
             return;
         }
 
@@ -842,11 +858,15 @@ void ec_fsm_slave_scan_state_sii_device(
         return;
 
     if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
-        fsm->slave->error_flag = 1;
-        fsm->state = ec_fsm_slave_scan_state_error;
         EC_SLAVE_ERR(slave, "Failed to determine product and vendor id."
                 " Reading word offset 0x%04x failed.\n",
                 fsm->sii_offset);
+        if (fsm->scan_retries--) {
+            fsm->state = ec_fsm_slave_scan_state_retry;
+        } else {
+            fsm->slave->error_flag = 1;
+            fsm->state = ec_fsm_slave_scan_state_error;
+        }
         return;
     }
 
@@ -868,6 +888,20 @@ void ec_fsm_slave_scan_state_sii_device(
     slave->sii_image->sii.revision_number = EC_READ_U32(slave->vendor_words + EC_REVISION_SII_OFFSET);
     slave->sii_image->sii.serial_number   = EC_READ_U32(slave->vendor_words + EC_SERIAL_SII_OFFSET);
 
+    // check for invalid vendor id and product code
+    if ( (slave->sii_image->sii.vendor_id == 0) ||
+         (slave->sii_image->sii.product_code == 0) ) {
+        EC_SLAVE_ERR(slave, "Failed to determine product and vendor id."
+                " SII returned a zero value.\n");
+        if (fsm->scan_retries--) {
+            fsm->state = ec_fsm_slave_scan_state_retry;
+        } else {
+            fsm->slave->error_flag = 1;
+            fsm->state = ec_fsm_slave_scan_state_error;
+        }
+        return;
+    }
+
     slave->effective_alias                = slave->sii_image->sii.alias;
 #ifdef EC_SII_CACHE
     slave->effective_vendor_id            = slave->sii_image->sii.vendor_id;
@@ -1024,13 +1058,20 @@ void ec_fsm_slave_scan_state_sii_size(
     }
 
     if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
-        fsm->slave->error_flag = 1;
-        fsm->state = ec_fsm_slave_scan_state_error;
-        EC_SLAVE_ERR(slave, "Failed to determine SII content size:"
-                " Reading word offset 0x%04x failed. Assuming %u words.\n",
-                fsm->sii_offset, EC_FIRST_SII_CATEGORY_OFFSET);
-        slave->sii_image->nwords = EC_FIRST_SII_CATEGORY_OFFSET;
-        goto alloc_sii;
+        if (fsm->scan_retries--) {
+            EC_SLAVE_ERR(slave, "Failed to determine SII content size"
+                    " Retrying.\n");
+            fsm->state = ec_fsm_slave_scan_state_retry;
+            return;
+        } else {
+            fsm->slave->error_flag = 1;
+            fsm->state = ec_fsm_slave_scan_state_error;
+            EC_SLAVE_ERR(slave, "Failed to determine SII content size:"
+                    " Reading word offset 0x%04x failed. Assuming %u words.\n",
+                    fsm->sii_offset, EC_FIRST_SII_CATEGORY_OFFSET);
+            slave->sii_image->nwords = EC_FIRST_SII_CATEGORY_OFFSET;
+            goto alloc_sii;
+        }
     }
 
     cat_type = EC_READ_U16(fsm->fsm_sii.value);
@@ -1104,9 +1145,13 @@ void ec_fsm_slave_scan_state_sii_data(
     if (ec_fsm_sii_exec(&fsm->fsm_sii, datagram)) return;
 
     if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
-        fsm->slave->error_flag = 1;
-        fsm->state = ec_fsm_slave_scan_state_error;
         EC_SLAVE_ERR(slave, "Failed to fetch SII contents.\n");
+        if (fsm->scan_retries--) {
+            fsm->state = ec_fsm_slave_scan_state_retry;
+        } else {
+          fsm->slave->error_flag = 1;
+          fsm->state = ec_fsm_slave_scan_state_error;
+        }
         return;
     }
 
@@ -1604,6 +1649,41 @@ void ec_fsm_slave_scan_state_pdos(
     fsm->state = ec_fsm_slave_scan_state_end;
 }
 
+/*****************************************************************************/
+
+/** Slave scan state: scan retry.
+ */
+void ec_fsm_slave_scan_state_retry(
+        ec_fsm_slave_scan_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    fsm->scan_jiffies_start = jiffies;
+    fsm->state = ec_fsm_slave_scan_state_retry_wait;
+    EC_SLAVE_WARN(slave, "Retrying slave scan.\n");
+    return;
+}
+
+/*****************************************************************************/
+
+/** Slave scan state: scan retry wait.
+ */
+void ec_fsm_slave_scan_state_retry_wait(
+        ec_fsm_slave_scan_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    // wait for timeout
+    unsigned long diff_ms =
+        (jiffies - fsm->scan_jiffies_start) * 1000 / HZ;
+        
+    if (diff_ms >= SCAN_RETRY_TIME) {
+        fsm->state = ec_fsm_slave_scan_state_start;
+    }
+}
+
 /******************************************************************************
  * Common state functions
  *****************************************************************************/
diff --git a/master/fsm_slave_scan.h b/master/fsm_slave_scan.h
--- a/master/fsm_slave_scan.h
+++ b/master/fsm_slave_scan.h
@@ -60,6 +60,8 @@ struct ec_fsm_slave_scan
                                                machine to use. */
     ec_fsm_pdo_t *fsm_pdo; /**< PDO configuration state machine to use. */
     unsigned int retries; /**< Retries on datagram timeout. */
+    unsigned int scan_retries; /**< Retries on scan read error. */
+    unsigned long scan_jiffies_start; /**< scan retry start timestamp. */
 
     void (*state)(ec_fsm_slave_scan_t *, ec_datagram_t *); /**< State function. */
     uint16_t sii_offset; /**< SII offset in words. */
