From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Wed, 1 Jun 2016 09:59:49 +0200

After a comms interruption, allow SAFEOP->OP directly instead of re-INIT.

If a slave was in SAFEOP+ERROR with an observed sync timeout, it was probably a
comms interruption and its current configuration should still be correct.

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1266,6 +1266,36 @@ else
 fi
 
 #------------------------------------------------------------------------------
+# Quick OP
+#------------------------------------------------------------------------------
+
+AC_MSG_CHECKING([whether to allow quick OP])
+
+AC_ARG_ENABLE([quick-op],
+    AS_HELP_STRING([--disable-quick-op],
+                   [Disable quick return to OP]),
+    [
+        case "${enableval}" in
+            yes) quickop=1
+                ;;
+            no) quickop=0
+                ;;
+            *) AC_MSG_ERROR([Invalid value for --enable-quick-op])
+                ;;
+        esac
+    ],
+    [quickop=1]
+)
+
+if test "x${quickop}" = "x1"; then
+    AC_DEFINE([EC_QUICK_OP], [1], [Allow quick return to OP ]
+        [from SAFEOP+PD_watchdog.])
+    AC_MSG_RESULT([yes])
+else
+    AC_MSG_RESULT([no])
+fi
+
+#------------------------------------------------------------------------------
 # syslog output in realtime context
 #------------------------------------------------------------------------------
 
diff --git a/master/fsm_change.c b/master/fsm_change.c
--- a/master/fsm_change.c
+++ b/master/fsm_change.c
@@ -425,8 +425,10 @@ void ec_fsm_change_state_code(ec_fsm_cha
         EC_SLAVE_WARN(fsm->slave, "Reception of AL status code"
                 " datagram failed: ");
         ec_datagram_print_wc_error(datagram);
+        fsm->slave->last_al_error = 0;
     } else {
         code = EC_READ_U16(datagram->data);
+        fsm->slave->last_al_error = code;
         for (al_msg = al_status_messages; al_msg->code != 0xffff; al_msg++) {
             if (al_msg->code != code) {
                 continue;
diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -833,7 +833,19 @@ void ec_fsm_master_action_configure(
 
         fsm->idle = 0;
         fsm->state = ec_fsm_master_state_configure_slave;
-        ec_fsm_slave_config_start(&fsm->fsm_slave_config, slave);
+#ifdef EC_QUICK_OP
+        if (!slave->force_config
+                && slave->current_state == EC_SLAVE_STATE_SAFEOP
+                && slave->requested_state == EC_SLAVE_STATE_OP
+                && slave->last_al_error == 0x001B) {
+            // last error was a sync watchdog timeout; assume a comms
+            // interruption and request a quick transition back to OP
+            ec_fsm_slave_config_quick_start(&fsm->fsm_slave_config, slave);
+        } else
+#endif
+        {
+            ec_fsm_slave_config_start(&fsm->fsm_slave_config, slave);
+        }
         fsm->state(fsm); // execute immediately
         fsm->datagram->device_index = fsm->slave->device_index;
         return;
diff --git a/master/fsm_slave_config.c b/master/fsm_slave_config.c
--- a/master/fsm_slave_config.c
+++ b/master/fsm_slave_config.c
@@ -62,6 +62,7 @@
 /*****************************************************************************/
 
 void ec_fsm_slave_config_state_start(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_quick_start(ec_fsm_slave_config_t *);
 void ec_fsm_slave_config_state_init(ec_fsm_slave_config_t *);
 void ec_fsm_slave_config_state_clear_fmmus(ec_fsm_slave_config_t *);
 void ec_fsm_slave_config_state_clear_sync(ec_fsm_slave_config_t *);
@@ -164,6 +165,19 @@ void ec_fsm_slave_config_start(
 
 /*****************************************************************************/
 
+/** Start slave configuration state machine for "quick" SAFEOP->OP
+ */
+void ec_fsm_slave_config_quick_start(
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_slave_t *slave /**< slave to configure */
+        )
+{
+    fsm->slave = slave;
+    fsm->state = ec_fsm_slave_config_state_quick_start;
+}
+
+/*****************************************************************************/
+
 /**
  * \return false, if state machine has terminated
  */
@@ -226,6 +240,18 @@ void ec_fsm_slave_config_state_start(
 
 /*****************************************************************************/
 
+/** Slave configuration state: QUICK START.
+ */
+void ec_fsm_slave_config_state_quick_start(
+        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        )
+{
+    EC_SLAVE_DBG(fsm->slave, 1, "Configuring (quick)...\n");
+    ec_fsm_slave_config_enter_soe_conf_safeop(fsm);
+}
+
+/*****************************************************************************/
+
 /** Start state change to INIT.
  */
 void ec_fsm_slave_config_enter_init(
diff --git a/master/fsm_slave_config.h b/master/fsm_slave_config.h
--- a/master/fsm_slave_config.h
+++ b/master/fsm_slave_config.h
@@ -77,6 +77,7 @@ void ec_fsm_slave_config_init(ec_fsm_sla
 void ec_fsm_slave_config_clear(ec_fsm_slave_config_t *);
 
 void ec_fsm_slave_config_start(ec_fsm_slave_config_t *, ec_slave_t *);
+void ec_fsm_slave_config_quick_start(ec_fsm_slave_config_t *, ec_slave_t *);
 
 int ec_fsm_slave_config_exec(ec_fsm_slave_config_t *);
 int ec_fsm_slave_config_success(const ec_fsm_slave_config_t *);
diff --git a/master/slave.c b/master/slave.c
--- a/master/slave.c
+++ b/master/slave.c
@@ -84,6 +84,7 @@ void ec_slave_init(
     slave->config = NULL;
     slave->requested_state = EC_SLAVE_STATE_PREOP;
     slave->current_state = EC_SLAVE_STATE_UNKNOWN;
+    slave->last_al_error = 0;
     slave->error_flag = 0;
     slave->force_config = 0;
     slave->reboot = 0;
diff --git a/master/slave.h b/master/slave.h
--- a/master/slave.h
+++ b/master/slave.h
@@ -234,6 +234,7 @@ struct ec_slave
     ec_slave_config_t *config; /**< Current configuration. */
     ec_slave_state_t requested_state; /**< Requested application state. */
     ec_slave_state_t current_state; /**< Current application state. */
+    uint16_t last_al_error; /**< Last AL state error code */
     unsigned int error_flag; /**< Stop processing after an error. */
     unsigned int force_config; /**< Force (re-)configuration. */
     unsigned int reboot; /**< Request reboot */
