From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Wed, 15 Jun 2016 19:19:19 +1200

Ability to load SII information from files

Based on a patch from Graeme Foot
Based on a patch from Jesper Smith

diff --git a/configure.ac b/configure.ac
--- a/configure.ac
+++ b/configure.ac
@@ -1296,6 +1296,47 @@ else
 fi
 
 #------------------------------------------------------------------------------
+# Alternate SII firmware loading
+#------------------------------------------------------------------------------
+
+AC_MSG_CHECKING([whether to load SII locally if available])
+
+AC_ARG_ENABLE([sii-override],
+    AS_HELP_STRING([--enable-sii-override],
+                   [Enable SII override (default: no)
+--enable-sii-override=/lib/firmware to load directly]),
+    [
+        case "${enableval}" in
+            yes) siioverride=1
+                siidir=""
+                ;;
+            no) siioverride=0
+                siidir=""
+                ;;
+            */) AC_MSG_ERROR([Must omit trailing slash in --enable-sii-override.])
+                ;;
+            *) siioverride=1
+               siidir="${enableval}"
+                ;;
+        esac
+    ],
+    [siioverride=0]
+    [siidir=""]
+)
+
+if test "x${siioverride}" = "x1"; then
+    AC_DEFINE([EC_SII_OVERRIDE], [1], [Allow locally loadable SII])
+    if test "x${siidir}" = "x"; then
+        AC_MSG_RESULT([yes, from hotplug])
+    else
+        AC_MSG_RESULT([yes, from $siidir])
+        AC_DEFINE_UNQUOTED([EC_SII_DIR], ["$siidir"], [Direct SII firmware base path])
+    fi
+else
+    AC_MSG_RESULT([no])
+fi
+
+#------------------------------------------------------------------------------
 # syslog output in realtime context
 #------------------------------------------------------------------------------
 
diff --git a/master/Kbuild.in b/master/Kbuild.in
--- a/master/Kbuild.in
+++ b/master/Kbuild.in
@@ -67,6 +67,7 @@ ec_master-objs := \
 	sdo_request.o \
 	slave.o \
 	slave_config.o \
+	sii_firmware.o \
 	soe_errors.o \
 	soe_request.o \
 	sync.o \
diff --git a/master/Makefile.am b/master/Makefile.am
--- a/master/Makefile.am
+++ b/master/Makefile.am
@@ -70,6 +70,7 @@ noinst_HEADERS = \
 	sdo.c sdo.h \
 	sdo_entry.c sdo_entry.h \
 	sdo_request.c sdo_request.h \
+	sii_firmware.c sii_firmware.h \
 	slave.c slave.h \
 	slave_config.c slave_config.h \
 	soe_errors.c \
diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -37,6 +37,7 @@
 #include "globals.h"
 #include "master.h"
 #include "mailbox.h"
+#include "sii_firmware.h"
 #include "slave_config.h"
 
 #include "fsm_slave_scan.h"
@@ -56,8 +57,13 @@ void ec_fsm_slave_scan_state_assign_sii(
 #ifdef EC_SII_CACHE
 void ec_fsm_slave_scan_state_sii_identity(ec_fsm_slave_scan_t *);
 #endif
+#ifdef EC_SII_OVERRIDE
+void ec_fsm_slave_scan_state_sii_device(ec_fsm_slave_scan_t *);
+void ec_fsm_slave_scan_state_sii_request(ec_fsm_slave_scan_t *);
+#endif
 void ec_fsm_slave_scan_state_sii_size(ec_fsm_slave_scan_t *);
 void ec_fsm_slave_scan_state_sii_data(ec_fsm_slave_scan_t *);
+void ec_fsm_slave_scan_state_sii_parse(ec_fsm_slave_scan_t *);
 void ec_fsm_slave_scan_state_mailbox_cleared(ec_fsm_slave_scan_t *);
 #ifdef EC_REGALIAS
 void ec_fsm_slave_scan_state_regalias(ec_fsm_slave_scan_t *);
@@ -76,6 +82,9 @@ void ec_fsm_slave_scan_enter_regalias(ec
 #ifdef EC_SII_CACHE
 void ec_fsm_slave_scan_enter_sii_identity(ec_fsm_slave_scan_t *);
 #endif
+#ifdef EC_SII_OVERRIDE
+void ec_fsm_slave_scan_enter_sii_request(ec_fsm_slave_scan_t *);
+#endif
 void ec_fsm_slave_scan_enter_attach_sii(ec_fsm_slave_scan_t *);
 void ec_fsm_slave_scan_enter_sii_size(ec_fsm_slave_scan_t *);
 void ec_fsm_slave_scan_enter_preop(ec_fsm_slave_scan_t *);
@@ -577,12 +586,31 @@ void ec_fsm_slave_scan_enter_sii_size(
         ec_fsm_slave_scan_t *fsm /**< slave state machine */
         )
 {
+    ec_slave_t *slave = fsm->slave;
+
+#ifdef EC_SII_OVERRIDE
+    if (!slave->vendor_words) {
+        if (!(slave->vendor_words =
+              (uint16_t *) kmalloc(32, GFP_KERNEL))) {
+            EC_SLAVE_ERR(slave, "Failed to allocate 16 words of SII data.\n");
+            slave->error_flag = 1;
+            fsm->state = ec_fsm_slave_scan_state_error;
+            return;
+        }
+    }
+
+    // Start fetching device identity
+    fsm->sii_offset = 0;
+    fsm->state = ec_fsm_slave_scan_state_sii_device;
+#else
     // Start fetching SII size
-
     fsm->sii_offset = EC_FIRST_SII_CATEGORY_OFFSET; // first category header
-    ec_fsm_sii_read(&fsm->fsm_sii, fsm->slave, fsm->sii_offset,
+    fsm->state = ec_fsm_slave_scan_state_sii_size;
+#endif
+
+    ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
             EC_FSM_SII_USE_CONFIGURED_ADDRESS);
-    fsm->state = ec_fsm_slave_scan_state_sii_size;
+
     fsm->state(fsm); // execute state immediately
 }
 
@@ -771,6 +799,178 @@ void ec_fsm_slave_scan_state_sii_identit
 }
 #endif
 
+#ifdef EC_SII_OVERRIDE
+/*****************************************************************************/
+
+/**
+   Slave scan state: SII DEVICE.
+*/
+
+void ec_fsm_slave_scan_state_sii_device(
+        ec_fsm_slave_scan_t *fsm /**< slave state machine */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    if (ec_fsm_sii_exec(&fsm->fsm_sii))
+        return;
+
+    if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
+        fsm->slave->error_flag = 1;
+        fsm->state = ec_fsm_slave_scan_state_error;
+        EC_SLAVE_ERR(slave, "Failed to determine product and vendor id."
+                " Reading word offset 0x%04x failed.\n",
+                fsm->sii_offset);
+        return;
+    }
+
+    memcpy(slave->vendor_words + fsm->sii_offset, fsm->fsm_sii.value, 4);
+
+    if (fsm->sii_offset + 2 < 16) {
+        // fetch the next 2 words
+        fsm->sii_offset += 2;
+        ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
+                        EC_FSM_SII_USE_CONFIGURED_ADDRESS);
+        ec_fsm_sii_exec(&fsm->fsm_sii); // execute state immediately
+        return;
+    }
+
+    // Evaluate SII contents
+    slave->sii_image->sii.alias           = EC_READ_U16(slave->vendor_words + EC_ALIAS_SII_OFFSET);
+    slave->sii_image->sii.vendor_id       = EC_READ_U32(slave->vendor_words + EC_VENDOR_SII_OFFSET);
+    slave->sii_image->sii.product_code    = EC_READ_U32(slave->vendor_words + EC_PRODUCT_SII_OFFSET);
+    slave->sii_image->sii.revision_number = EC_READ_U32(slave->vendor_words + EC_REVISION_SII_OFFSET);
+    slave->sii_image->sii.serial_number   = EC_READ_U32(slave->vendor_words + EC_SERIAL_SII_OFFSET);
+
+    slave->effective_alias                = slave->sii_image->sii.alias;
+#ifdef EC_SII_CACHE
+    slave->effective_vendor_id            = slave->sii_image->sii.vendor_id;
+    slave->effective_product_code         = slave->sii_image->sii.product_code;
+    slave->effective_revision_number      = slave->sii_image->sii.revision_number;
+    slave->effective_serial_number        = slave->sii_image->sii.serial_number;
+#endif
+
+    ec_fsm_slave_scan_enter_sii_request(fsm);
+}
+
+/*****************************************************************************/
+
+struct firmware_request_context
+{
+    struct task_struct *fsm_task;
+    ec_fsm_slave_scan_t *fsm;
+    ec_slave_t *slave;
+};
+
+static const struct firmware no_sii_firmware;
+
+static void firmware_request_complete(
+        const struct firmware *firmware,
+        void *context
+        )
+{
+    struct firmware_request_context *ctx = context;
+    ec_fsm_slave_scan_t *fsm = ctx->fsm;
+
+    if (fsm->slave != ctx->slave) {
+        printk(KERN_ERR "Aborting firmware request; FSM slave changed unexpectedly.\n");
+        ec_release_sii_firmware(firmware);
+    } else if (fsm->state != ec_fsm_slave_scan_state_sii_request) {
+        EC_SLAVE_WARN(fsm->slave, "Aborting firmware request; FSM state changed unexpectedly.\n");
+        ec_release_sii_firmware(firmware);
+    } else {
+        fsm->sii_firmware = firmware ? firmware : &no_sii_firmware;
+    }
+
+    kfree(ctx);
+}
+
+/*****************************************************************************/
+
+/**
+   Enter slave scan state: SII REQUEST.
+*/
+
+void ec_fsm_slave_scan_enter_sii_request(
+        ec_fsm_slave_scan_t *fsm /**< slave state machine */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+    struct firmware_request_context *ctx;
+
+    if (!(ctx = kmalloc(sizeof(*ctx), GFP_KERNEL))) {
+        EC_SLAVE_ERR(slave, "Unable to allocate firmware request context.\n");
+        fsm->state = ec_fsm_slave_scan_state_error;
+        return;
+    }
+
+    ctx->fsm_task = current;
+    ctx->fsm = fsm;
+    ctx->slave = slave;
+
+    fsm->sii_firmware = NULL;
+    fsm->state = ec_fsm_slave_scan_state_sii_request;
+    ec_request_sii_firmware(slave, ctx, firmware_request_complete);
+    fsm->state(fsm); // execute state immediately
+}
+
+/*****************************************************************************/
+
+/**
+   Slave scan state: SII REQUEST.
+*/
+
+void ec_fsm_slave_scan_state_sii_request(
+        ec_fsm_slave_scan_t *fsm /**< slave state machine */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+    const struct firmware *firmware = fsm->sii_firmware;
+    
+    if (firmware == &no_sii_firmware) {
+        EC_SLAVE_DBG(slave, 1, "SII firmware file not found; reading SII data from slave.\n");
+        fsm->sii_firmware = NULL;
+
+        fsm->sii_offset = EC_FIRST_SII_CATEGORY_OFFSET; // first category header
+        ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
+                EC_FSM_SII_USE_CONFIGURED_ADDRESS);
+        fsm->state = ec_fsm_slave_scan_state_sii_size;
+        fsm->state(fsm); // execute state immediately
+    } else if (firmware) {
+        EC_SLAVE_DBG(slave, 1, "Firmware file found, reading %zu bytes.\n", firmware->size);
+
+        slave->sii_image->nwords = firmware->size / 2;
+
+        if (slave->sii_image->words) {
+            EC_SLAVE_WARN(slave, "Freeing old SII data...\n");
+            kfree(slave->sii_image->words);
+        }
+        if (!(slave->sii_image->words =
+              (uint16_t *) kmalloc(slave->sii_image->nwords * 2, GFP_KERNEL))) {
+            EC_SLAVE_ERR(slave, "Failed to allocate %zu words of SII data.\n",
+                slave->sii_image->nwords);
+            slave->sii_image->nwords = 0;
+            slave->error_flag = 1;
+            ec_release_sii_firmware(firmware);
+            fsm->sii_firmware = NULL;
+
+            fsm->state = ec_fsm_slave_scan_state_error;
+            return;
+        }
+
+        memcpy(slave->sii_image->words, firmware->data, slave->sii_image->nwords * 2);
+        ec_release_sii_firmware(firmware);
+        fsm->sii_firmware = NULL;
+
+        fsm->state = ec_fsm_slave_scan_state_sii_parse;
+        fsm->state(fsm); // execute state immediately
+    } else {
+        // do nothing while waiting for async request to complete
+        fsm->datagram->state = EC_DATAGRAM_INVALID;
+    }
+}
+#endif
+
 /*****************************************************************************/
 
 /**
@@ -841,10 +1041,19 @@ alloc_sii:
         return;
     }
 
+#ifdef EC_SII_OVERRIDE
+    // Copy vendor data to sii words
+    memcpy(slave->sii_image->words, slave->vendor_words, 32);
+    kfree(slave->vendor_words);
+    slave->vendor_words = NULL;
+    
+    // Start fetching rest of SII contents
+    fsm->sii_offset = 0x0010;
+#else
     // Start fetching SII contents
-
+    fsm->sii_offset = 0x0000;
+#endif
     fsm->state = ec_fsm_slave_scan_state_sii_data;
-    fsm->sii_offset = 0x0000;
     ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
             EC_FSM_SII_USE_CONFIGURED_ADDRESS);
     ec_fsm_sii_exec(&fsm->fsm_sii); // execute state immediately
@@ -859,7 +1068,6 @@ alloc_sii:
 void ec_fsm_slave_scan_state_sii_data(ec_fsm_slave_scan_t *fsm /**< slave state machine */)
 {
     ec_slave_t *slave = fsm->slave;
-    uint16_t *cat_word, cat_type, cat_size;
 
     if (ec_fsm_sii_exec(&fsm->fsm_sii)) return;
 
@@ -894,10 +1102,26 @@ void ec_fsm_slave_scan_state_sii_data(ec
         return;
     }
 
+    fsm->state = ec_fsm_slave_scan_state_sii_parse;
+    fsm->state(fsm); // execute state immediately
+}
+
+/*****************************************************************************/
+
+/**
+   Slave scan state: SII PARSE.
+*/
+
+void ec_fsm_slave_scan_state_sii_parse(ec_fsm_slave_scan_t *fsm /**< slave state machine */)
+{
+    ec_slave_t *slave = fsm->slave;
+    uint16_t *cat_word, cat_type, cat_size;
+
     // Evaluate SII contents
 
     ec_slave_clear_sync_managers(slave);
 
+#ifndef EC_SII_OVERRIDE
     slave->sii_image->sii.alias =
         EC_READ_U16(slave->sii_image->words + 0x0004);
     slave->effective_alias = slave->sii_image->sii.alias;
@@ -909,6 +1133,7 @@ void ec_fsm_slave_scan_state_sii_data(ec
         EC_READ_U32(slave->sii_image->words + 0x000C);
     slave->sii_image->sii.serial_number =
         EC_READ_U32(slave->sii_image->words + 0x000E);
+#endif
     slave->sii_image->sii.boot_rx_mailbox_offset =
         EC_READ_U16(slave->sii_image->words + 0x0014);
     slave->sii_image->sii.boot_rx_mailbox_size =
@@ -928,7 +1153,7 @@ void ec_fsm_slave_scan_state_sii_data(ec
     slave->sii_image->sii.mailbox_protocols =
         EC_READ_U16(slave->sii_image->words + 0x001C);
 
-#ifdef EC_SII_CACHE
+#if !defined(EC_SII_OVERRIDE) && defined(EC_SII_CACHE)
     slave->effective_vendor_id = slave->sii_image->sii.vendor_id;
     slave->effective_product_code = slave->sii_image->sii.product_code;
     slave->effective_revision_number = slave->sii_image->sii.revision_number;
diff --git a/master/fsm_slave_scan.h b/master/fsm_slave_scan.h
--- a/master/fsm_slave_scan.h
+++ b/master/fsm_slave_scan.h
@@ -65,6 +65,10 @@ struct ec_fsm_slave_scan
     uint16_t sii_offset; /**< SII offset in words. */
 
     ec_fsm_sii_t fsm_sii; /**< SII state machine. */
+
+#ifdef EC_SII_OVERRIDE
+    const struct firmware *sii_firmware;
+#endif
 };
 
 /*****************************************************************************/
diff --git a/master/sii_firmware.c b/master/sii_firmware.c
new file mode 100644
--- /dev/null
+++ b/master/sii_firmware.c
@@ -0,0 +1,360 @@
+/******************************************************************************
+ *
+ *  $Id$
+ *
+ *  Copyright (C) 2016  Gavin Lambert
+ *
+ *  This file is part of the IgH EtherCAT Master.
+ *
+ *  The IgH EtherCAT Master is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License version 2, as
+ *  published by the Free Software Foundation.
+ *
+ *  The IgH EtherCAT Master is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
+ *  Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with the IgH EtherCAT Master; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *  ---
+ *
+ *  The license mentioned above concerns the source code only. Using the
+ *  EtherCAT technology and brand is only permitted in compliance with the
+ *  industrial property and similar rights of Beckhoff Automation GmbH.
+ *
+ *****************************************************************************/
+
+/**
+   \file
+   Methods of the SII "firmware" loader.
+*/
+
+/*****************************************************************************/
+
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 2, 0)
+#include <linux/export.h>
+#endif
+#include <linux/fs.h>
+#include <linux/file.h>
+#include <linux/firmware.h>
+#include <asm/processor.h>
+
+#include "master.h"
+#include "slave.h"
+
+#include "sii_firmware.h"
+
+/*****************************************************************************/
+#ifdef EC_SII_OVERRIDE
+
+/*****************************************************************************/
+#ifdef EC_SII_DIR
+
+/**
+   Request firmware direct from file.
+ */
+
+static int request_firmware_direct(
+       ec_slave_t *slave,
+       const char *filename,
+       struct firmware **out_firmware
+       )
+{
+    // firmware files must be readable but not
+    // executable, a directory, or sticky
+    const int permreqd   = S_IROTH;
+    const int permforbid = S_IFDIR | S_ISVTX | S_IXOTH | S_IXGRP | S_IXUSR;
+
+    int              retval = 0;
+    struct file     *filp;
+    struct firmware *firmware;
+    umode_t          permission;
+    mm_segment_t     old_fs;
+    loff_t           pos;
+    char             pathname[strlen(filename) + sizeof(EC_SII_DIR)];
+
+    if (filename == NULL)
+        return -EFAULT;
+    if (strlen(filename) + 14 >= 256)   // Sanity check.
+        return -EFAULT;
+
+    EC_SLAVE_DBG(slave, 1, "request_firmware_direct: %s.\n", filename);
+    sprintf(pathname, EC_SII_DIR "/%s", filename);
+
+    // does the file exist?
+    filp = filp_open(pathname, 0, O_RDONLY);
+    if ((IS_ERR(filp)) || (filp == NULL) || (filp->f_dentry == NULL)) {
+        retval = -ENOENT;
+        goto out;
+    }
+
+    // must have correct permissions
+    permission = filp->f_dentry->d_inode->i_mode;
+    if ((permission & permreqd) != permreqd) {
+        EC_SLAVE_WARN(slave, "Firmware %s not readable.\n", filename);
+        retval = -EPERM;
+        goto error_file;
+    }
+    if ((permission & permforbid) != 0) {
+        EC_SLAVE_WARN(slave, "Firmware %s incorrect perms.\n", filename);
+        retval = -EPERM;
+        goto error_file;
+    }
+
+    *out_firmware = firmware = kzalloc(sizeof(*firmware), GFP_KERNEL);
+    if (!firmware) {
+        EC_SLAVE_ERR(slave, "Failed to allocate memory (struct firmware).\n");
+        retval = -ENOMEM;
+        goto error_file;
+    }
+    firmware->size = filp->f_dentry->d_inode->i_size;
+
+    if (!(firmware->data = kmalloc(firmware->size, GFP_KERNEL))) {
+        EC_SLAVE_ERR(slave, "Failed to allocate memory (firmware data).\n");
+        retval = -ENOMEM;
+        goto error_firmware;
+    }
+
+    // read the firmware (need to temporarily allow access to kernel mem)
+    old_fs = get_fs();
+    set_fs(KERNEL_DS);
+
+    pos = 0;
+    while (pos < firmware->size) {
+        retval = vfs_read(filp, (char __user *) firmware->data + pos,
+                          firmware->size - pos, &pos);
+        if (retval < 0) {
+            set_fs(old_fs);
+            EC_SLAVE_ERR(slave, "Failed to read firmware (%d).\n", retval);
+            goto error_firmware_data;
+        }
+    }
+
+    set_fs(old_fs);
+
+    EC_SLAVE_INFO(slave, "SII firmware loaded from file %s.\n", filename);
+    filp_close(filp, NULL);
+    return 0;
+
+error_firmware_data:
+    kfree(firmware->data);
+error_firmware:
+    kfree(firmware);
+    *out_firmware = NULL;
+error_file:
+    filp_close(filp, NULL);
+out:
+    return retval;
+}
+#endif
+
+/*****************************************************************************/
+
+struct firmware_request_context
+{
+#ifdef EC_SII_DIR
+    struct work_struct work;
+    const char *filename;
+#else
+    struct device fw_device;
+    bool device_inited;
+#endif
+    ec_slave_t *slave;
+    void (*cont)(const struct firmware *, void *);
+    void *context;
+    char filename_vendor_product[48];
+    char filename_vendor_product_revision[48];
+    bool fallback;
+};
+
+static void firmware_request_complete(const struct firmware *, void *);
+
+/*****************************************************************************/
+#ifdef EC_SII_DIR
+
+static int request_firmware_direct_work_func(void *arg)
+{
+    struct firmware_request_context *ctx = arg;
+    struct firmware *fw = NULL;
+
+    if (request_firmware_direct(ctx->slave, ctx->filename, &fw) == 0) {
+        firmware_request_complete(fw, ctx);
+    } else {
+        firmware_request_complete(NULL, ctx);
+    }
+    return 0;
+}
+
+/*****************************************************************************/
+
+static int start_request(
+        struct firmware_request_context *ctx, /**< request context. */
+        const char *filename /**< firmware filename. */
+        )
+{
+    struct task_struct *task;
+
+    ctx->filename = filename;
+    task = kthread_run(request_firmware_direct_work_func, ctx,
+                       "firmware/%s", filename);
+    if (IS_ERR(task)) {
+        firmware_request_complete(NULL, ctx);
+        return PTR_ERR(task);
+    }
+    return 0;
+}
+
+static void clear_request(
+        struct firmware_request_context *ctx /**< request context. */
+        )
+{
+    kfree(ctx);
+}
+
+/*****************************************************************************/
+#else
+
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 33)
+#error "SII override requires kernel 2.6.33 or later; use --disable-sii-override instead."
+#endif
+
+static void fw_device_release(struct device *dev)
+{
+    struct firmware_request_context *ctx =
+            container_of(dev, struct firmware_request_context, fw_device);
+    kfree(ctx);
+}
+
+static int start_request(
+        struct firmware_request_context *ctx, /**< request context. */
+        const char *filename /**< firmware filename. */
+        )
+{
+    if (!ctx->device_inited) {
+        int error;
+        
+        // register a child device for the slave, because only one
+        // firmware request can be in flight per device.
+        device_initialize(&ctx->fw_device);
+        dev_set_name(&ctx->fw_device, "addr%u", ctx->slave->station_address);
+        dev_set_uevent_suppress(&ctx->fw_device, true);
+        ctx->fw_device.parent = ctx->slave->master->class_device;
+        ctx->fw_device.release = fw_device_release;
+
+        error = device_add(&ctx->fw_device);
+        if (error) {
+            EC_SLAVE_ERR(ctx->slave, "Unable to register child device for firmware.\n");
+            put_device(&ctx->fw_device);
+            return error;
+        }
+        ctx->device_inited = true;
+    }
+    
+    return request_firmware_nowait(THIS_MODULE, 1, filename,
+            &ctx->fw_device, GFP_KERNEL, ctx, firmware_request_complete);
+}
+
+static void clear_request(
+        struct firmware_request_context *ctx /**< request context. */
+        )
+{
+    if (ctx->device_inited) {
+        device_del(&ctx->fw_device);
+        put_device(&ctx->fw_device);
+        // ctx freed via fw_device_release
+    } else {
+        kfree(ctx);
+    }
+}
+
+#endif
+
+/*****************************************************************************/
+
+static void firmware_request_complete(
+        const struct firmware *firmware,
+        void *context
+        )
+{
+    struct firmware_request_context *ctx = context;
+
+    if (!firmware && !ctx->fallback) {
+        ctx->fallback = true;
+        if (start_request(ctx, ctx->filename_vendor_product) == 0) {
+            return;
+        }
+    }
+
+    ctx->cont(firmware, ctx->context);
+    clear_request(ctx);
+}
+
+/*****************************************************************************/
+
+/**
+   Request overridden SII image "firmware" from filesystem.
+ */
+
+void ec_request_sii_firmware(
+        ec_slave_t *slave, /**< slave. */
+        void *context, /**< continuation context. */
+        void (*cont)(const struct firmware *, void *) /**< continuation. */
+        )
+{
+    struct firmware_request_context *ctx;
+
+    if (!(ctx = kzalloc(sizeof(*ctx), GFP_KERNEL))) {
+        EC_SLAVE_ERR(slave, "Unable to allocate firmware request context.\n");
+        goto out_error;
+    }
+
+    sprintf(ctx->filename_vendor_product, "ethercat/ec_%08x_%08x.bin",
+            slave->sii_image->sii.vendor_id,
+            slave->sii_image->sii.product_code);
+    sprintf(ctx->filename_vendor_product_revision, "ethercat/ec_%08x_%08x_%08x.bin",
+            slave->sii_image->sii.vendor_id,
+            slave->sii_image->sii.product_code,
+            slave->sii_image->sii.revision_number);
+    ctx->slave = slave;
+    ctx->cont = cont;
+    ctx->context = context;
+
+    // request by vendor_product_revision first,
+    // then try more generic vendor_product
+    EC_SLAVE_DBG(slave, 1, "Trying to load SII firmware: %s\n", ctx->filename_vendor_product_revision);
+    EC_SLAVE_DBG(slave, 1, "                       then: %s\n", ctx->filename_vendor_product);
+
+    if (start_request(ctx, ctx->filename_vendor_product_revision) == 0) {
+        return;
+    }
+
+out_error:
+    cont(NULL, context);
+}
+
+/*****************************************************************************/
+
+/**
+   Releases firmware memory after a successful request.
+ */
+
+void ec_release_sii_firmware(const struct firmware *firmware /**< firmware to release. */)
+{
+#ifdef EC_SII_DIR
+    if (firmware) {
+        kfree(firmware->data);
+        kfree(firmware);
+    }
+#else
+    release_firmware(firmware);
+#endif
+}
+
+/*****************************************************************************/
+#endif //EC_SII_OVERRIDE
+
+/*****************************************************************************/
diff --git a/master/sii_firmware.h b/master/sii_firmware.h
new file mode 100644
--- /dev/null
+++ b/master/sii_firmware.h
@@ -0,0 +1,56 @@
+/******************************************************************************
+ *
+ *  $Id$
+ *
+ *  Copyright (C) 2016  Gavin Lambert
+ *
+ *  This file is part of the IgH EtherCAT Master.
+ *
+ *  The IgH EtherCAT Master is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License version 2, as
+ *  published by the Free Software Foundation.
+ *
+ *  The IgH EtherCAT Master is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
+ *  Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with the IgH EtherCAT Master; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *  ---
+ *
+ *  The license mentioned above concerns the source code only. Using the
+ *  EtherCAT technology and brand is only permitted in compliance with the
+ *  industrial property and similar rights of Beckhoff Automation GmbH.
+ *
+ *****************************************************************************/
+
+/**
+   \file
+   SII "firmware" loader.
+*/
+
+/*****************************************************************************/
+
+#ifndef __EC_SII_FIRMWARE_H__
+#define __EC_SII_FIRMWARE_H__
+
+#ifdef EC_SII_OVERRIDE
+
+#include <linux/firmware.h>
+
+#include "globals.h"
+
+/*****************************************************************************/
+
+void ec_request_sii_firmware(ec_slave_t *, void *,
+            void (*)(const struct firmware *, void *));
+
+void ec_release_sii_firmware(const struct firmware *);
+
+/*****************************************************************************/
+
+#endif
+#endif
diff --git a/master/slave.c b/master/slave.c
--- a/master/slave.c
+++ b/master/slave.c
@@ -125,6 +125,7 @@ void ec_slave_init(
     slave->has_dc_system_time = 0;
     slave->transmission_delay = 0U;
 
+    slave->vendor_words = NULL;
     slave->sii_image = NULL;
 
 
@@ -316,6 +317,10 @@ void ec_slave_clear(ec_slave_t *slave /*
         kfree(sdo);
     }
 
+    if (slave->vendor_words) {
+        kfree(slave->vendor_words);
+        slave->vendor_words = NULL;
+    }
 
     // free mailbox response data
 #ifdef EC_EOE
diff --git a/master/slave.h b/master/slave.h
--- a/master/slave.h
+++ b/master/slave.h
@@ -263,6 +263,7 @@ struct ec_slave
                                    (offset from reference clock). */
 
     // Slave information interface
+    uint16_t *vendor_words; /**< First 16 words of SII image. */
     ec_sii_image_t *sii_image;  /**< Current complete SII image. */
 
     struct list_head sdo_dictionary; /**< SDO dictionary list */
