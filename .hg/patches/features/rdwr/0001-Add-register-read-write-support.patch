From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Wed, 1 Jun 2016 10:02:39 +0200

Add register read+write support.

diff --git a/include/ecrt.h b/include/ecrt.h
--- a/include/ecrt.h
+++ b/include/ecrt.h
@@ -433,6 +433,7 @@ typedef enum {
     EC_DIR_INVALID, /**< Invalid direction. Do not use this value. */
     EC_DIR_OUTPUT, /**< Values written by the master. */
     EC_DIR_INPUT, /**< Values read by the master. */
+    EC_DIR_BOTH, /**< Values read and written by the master. */
     EC_DIR_COUNT /**< Number of directions. For internal use only. */
 } ec_direction_t;
 
@@ -2405,6 +2406,20 @@ void ecrt_write_lreal(void *data, double
 
 #endif // ifndef __KERNEL__
 
+/** Schedule a register read-write operation.
+ *
+ * \attention This method may not be called while ecrt_reg_request_state()
+ * returns EC_REQUEST_BUSY.
+ *
+ * \attention The \a size parameter is truncated to the size given at request
+ * creation.
+ */
+void ecrt_reg_request_readwrite(
+        ec_reg_request_t *req, /**< Register request. */
+        uint16_t address, /**< Register address. */
+        size_t size /**< Size to read-write. */
+        );
+
 /*****************************************************************************/
 
 #ifdef __cplusplus
diff --git a/lib/reg_request.c b/lib/reg_request.c
--- a/lib/reg_request.c
+++ b/lib/reg_request.c
@@ -135,3 +135,24 @@ void ecrt_reg_request_read(ec_reg_reques
 }
 
 /*****************************************************************************/
+
+void ecrt_reg_request_readwrite(ec_reg_request_t *reg, uint16_t address,
+        size_t size)
+{
+    ec_ioctl_reg_request_t io;
+    int ret;
+
+    io.config_index = reg->config->index;
+    io.request_index = reg->index;
+    io.data = reg->data;
+    io.address = address;
+    io.transfer_size = size;
+
+    ret = ioctl(reg->config->master->fd, EC_IOCTL_REG_REQUEST_READWRITE, &io);
+    if (EC_IOCTL_IS_ERROR(ret)) {
+        EC_PRINT_ERR("Failed to command an register read-write operation: %s\n",
+                strerror(EC_IOCTL_ERRNO(ret)));
+    }
+}
+
+/*****************************************************************************/
diff --git a/master/fsm_slave.c b/master/fsm_slave.c
--- a/master/fsm_slave.c
+++ b/master/fsm_slave.c
@@ -396,15 +396,31 @@ int ec_fsm_slave_action_process_reg(
     fsm->reg_request->state = EC_INT_REQUEST_BUSY;
 
     // Start register access
-    if (fsm->reg_request->dir == EC_DIR_INPUT) {
+    switch (fsm->reg_request->dir) {
+    case EC_DIR_INPUT:
         ec_datagram_fprd(datagram, slave->station_address,
                 fsm->reg_request->address, fsm->reg_request->transfer_size);
         ec_datagram_zero(datagram);
-    } else {
+        break;
+    case EC_DIR_OUTPUT:
         ec_datagram_fpwr(datagram, slave->station_address,
                 fsm->reg_request->address, fsm->reg_request->transfer_size);
         memcpy(datagram->data, fsm->reg_request->data,
                 fsm->reg_request->transfer_size);
+        break;
+    case EC_DIR_BOTH:
+        ec_datagram_fprw(datagram, slave->station_address,
+                fsm->reg_request->address, fsm->reg_request->transfer_size);
+        memcpy(datagram->data, fsm->reg_request->data,
+               fsm->reg_request->transfer_size);
+        break;
+    default:
+        EC_SLAVE_WARN(slave, "Aborting register request, unknown direction.\n");
+        fsm->reg_request->state = EC_INT_REQUEST_FAILURE;
+        wake_up_all(&slave->master->request_queue);
+        fsm->reg_request = NULL;
+        fsm->state = ec_fsm_slave_state_idle;
+        return 1;
     }
     datagram->device_index = slave->device_index;
     fsm->state = ec_fsm_slave_state_reg_request;
@@ -441,8 +457,8 @@ void ec_fsm_slave_state_reg_request(
         return;
     }
 
-    if (fsm->datagram->working_counter == 1) {
-        if (reg->dir == EC_DIR_INPUT) { // read request
+    if (fsm->datagram->working_counter == ((reg->dir == EC_DIR_BOTH) ? 3 : 1)) {
+        if (reg->dir != EC_DIR_OUTPUT) { // read/read-write request
             memcpy(reg->data, fsm->datagram->data, reg->transfer_size);
         }
 
diff --git a/master/ioctl.c b/master/ioctl.c
--- a/master/ioctl.c
+++ b/master/ioctl.c
@@ -1310,6 +1310,95 @@ static ATTRIBUTES int ec_ioctl_slave_reg
 
 /*****************************************************************************/
 
+/** Read & Write a slave's registers.
+ *
+ * \return Zero on success, otherwise a negative error code.
+ */
+static ATTRIBUTES int ec_ioctl_slave_reg_readwrite(
+        ec_master_t *master, /**< EtherCAT master. */
+        void *arg /**< ioctl() argument. */
+        )
+{
+    ec_ioctl_slave_reg_t io;
+    ec_slave_t *slave;
+    ec_reg_request_t request;
+    int ret;
+
+    if (copy_from_user(&io, (void __user *) arg, sizeof(io))) {
+        return -EFAULT;
+    }
+
+    if (!io.size) {
+        return 0;
+    }
+
+    // init register request
+    ret = ec_reg_request_init(&request, io.size);
+    if (ret) {
+        return ret;
+    }
+
+    if (copy_from_user(request.data, (void __user *) io.data, io.size)) {
+        ec_reg_request_clear(&request);
+        return -EFAULT;
+    }
+
+    ecrt_reg_request_readwrite(&request, io.address, io.size);
+
+    if (ec_lock_down_interruptible(&master->master_sem)) {
+        ec_reg_request_clear(&request);
+        return -EINTR;
+    }
+
+    if (io.emergency) {
+        request.ring_position = io.slave_position;
+        // schedule request.
+        list_add_tail(&request.list, &master->emerg_reg_requests);
+    } else {
+        if (!(slave = ec_master_find_slave(master, 0, io.slave_position))) {
+            ec_lock_up(&master->master_sem);
+            ec_reg_request_clear(&request);
+            EC_MASTER_ERR(master, "Slave %u does not exist!\n",
+                    io.slave_position);
+            return -EINVAL;
+        }
+
+        // schedule request.
+        list_add_tail(&request.list, &slave->reg_requests);
+    }
+
+    ec_lock_up(&master->master_sem);
+
+    // wait for processing through FSM
+    if (wait_event_interruptible(master->request_queue,
+                request.state != EC_INT_REQUEST_QUEUED)) {
+        // interrupted by signal
+        ec_lock_down(&master->master_sem);
+        if (request.state == EC_INT_REQUEST_QUEUED) {
+            // abort request
+            list_del(&request.list);
+            ec_lock_up(&master->master_sem);
+            ec_reg_request_clear(&request);
+            return -EINTR;
+        }
+        ec_lock_up(&master->master_sem);
+    }
+
+    // wait until master FSM has finished processing
+    wait_event(master->request_queue, request.state != EC_INT_REQUEST_BUSY);
+
+    if (request.state == EC_INT_REQUEST_SUCCESS) {
+        if (copy_to_user((void __user *) io.data, request.data, io.size)) {
+            return -EFAULT;
+        }
+    }
+    ec_reg_request_clear(&request);
+
+    return request.state == EC_INT_REQUEST_SUCCESS ? 0 : -EIO;
+}
+
+/*****************************************************************************/
+
 /** Get slave configuration information.
  *
  * \return Zero on success, otherwise a negative error code.
@@ -3880,7 +3969,8 @@ static ATTRIBUTES int ec_ioctl_reg_reque
     }
 
     io.state = ecrt_reg_request_state(reg);
-    io.new_data = io.state == EC_REQUEST_SUCCESS && reg->dir == EC_DIR_INPUT;
+    io.new_data = io.state == EC_REQUEST_SUCCESS &&
+            (reg->dir == EC_DIR_INPUT || reg->dir == EC_DIR_BOTH);
 
     if (copy_to_user((void __user *) arg, &io, sizeof(io))) {
         return -EFAULT;
@@ -3982,6 +4072,54 @@ static ATTRIBUTES int ec_ioctl_reg_reque
 
 /*****************************************************************************/
 
+/** Starts an register read-write operation.
+ *
+ * \return Zero on success, otherwise a negative error code.
+ */
+static ATTRIBUTES int ec_ioctl_reg_request_readwrite(
+        ec_master_t *master, /**< EtherCAT master. */
+        void *arg, /**< ioctl() argument. */
+        ec_ioctl_context_t *ctx /**< Private data structure of file handle. */
+        )
+{
+    ec_ioctl_reg_request_t io;
+    ec_slave_config_t *sc;
+    ec_reg_request_t *reg;
+
+    if (unlikely(!ctx->requested)) {
+        return -EPERM;
+    }
+
+    if (copy_from_user(&io, (void __user *) arg, sizeof(io))) {
+        return -EFAULT;
+    }
+
+    /* no locking of master_sem needed, because neither sc nor reg will not be
+     * deleted in the meantime. */
+
+    if (!(sc = ec_master_get_config(master, io.config_index))) {
+        return -ENOENT;
+    }
+
+    if (!(reg = ec_slave_config_find_reg_request(sc, io.request_index))) {
+        return -ENOENT;
+    }
+
+    if (io.transfer_size > reg->mem_size) {
+        return -EOVERFLOW;
+    }
+
+    if (copy_from_user(reg->data, (void __user *) io.data,
+                io.transfer_size)) {
+        return -EFAULT;
+    }
+
+    ecrt_reg_request_readwrite(reg, io.address, io.transfer_size);
+    return 0;
+}
+
+/*****************************************************************************/
+
 /** Sets the VoE send header.
  *
  * \return Zero on success, otherwise a negative error code.
@@ -4698,6 +4836,13 @@ long EC_IOCTL(
             }
             ret = ec_ioctl_slave_reg_write(master, arg);
             break;
+        case EC_IOCTL_SLAVE_REG_READWRITE:
+            if (!ctx->writable) {
+                ret = -EPERM;
+                break;
+            }
+            ret = ec_ioctl_slave_reg_readwrite(master, arg);
+            break;
         case EC_IOCTL_SLAVE_FOE_READ:
             ret = ec_ioctl_slave_foe_read(master, arg);
             break;
@@ -5102,6 +5247,13 @@ long EC_IOCTL(
             }
             ret = ec_ioctl_reg_request_read(master, arg, ctx);
             break;
+        case EC_IOCTL_REG_REQUEST_READWRITE:
+            if (!ctx->writable) {
+                ret = -EPERM;
+                break;
+            }
+            ret = ec_ioctl_reg_request_readwrite(master, arg, ctx);
+            break;
         case EC_IOCTL_VOE_SEND_HEADER:
             if (!ctx->writable) {
                 ret = -EPERM;
diff --git a/master/ioctl.h b/master/ioctl.h
--- a/master/ioctl.h
+++ b/master/ioctl.h
@@ -159,6 +159,8 @@
 #define EC_IOCTL_SET_SEND_INTERVAL     EC_IOW(0x5a, size_t)
 #define EC_IOCTL_SC_OVERLAPPING_IO     EC_IOW(0x5b, ec_ioctl_config_t)
 #define EC_IOCTL_SLAVE_REBOOT         EC_IOW(0x5c, ec_ioctl_slave_reboot_t)
+#define EC_IOCTL_SLAVE_REG_READWRITE  EC_IOWR(0x5d, ec_ioctl_slave_reg_t)
+#define EC_IOCTL_REG_REQUEST_READWRITE EC_IOWR(0x5e, ec_ioctl_reg_request_t)
 #define EC_IOCTL_SETUP_DOMAIN_MEMORY   EC_IOR(0x60, ec_ioctl_master_activate_t)
 #define EC_IOCTL_DEACTIVATE_SLAVES      EC_IO(0x61)
 #define EC_IOCTL_64_REF_CLK_TIME_QUEUE  EC_IO(0x62)
diff --git a/master/reg_request.c b/master/reg_request.c
--- a/master/reg_request.c
+++ b/master/reg_request.c
@@ -119,12 +119,24 @@ void ecrt_reg_request_read(ec_reg_reques
 
 /*****************************************************************************/
 
+void ecrt_reg_request_readwrite(ec_reg_request_t *reg, uint16_t address,
+        size_t size)
+{
+    reg->dir = EC_DIR_BOTH;
+    reg->address = address;
+    reg->transfer_size = min(size, reg->mem_size);
+    reg->state = EC_INT_REQUEST_QUEUED;
+}
+
+/*****************************************************************************/
+
 /** \cond */
 
 EXPORT_SYMBOL(ecrt_reg_request_data);
 EXPORT_SYMBOL(ecrt_reg_request_state);
 EXPORT_SYMBOL(ecrt_reg_request_write);
 EXPORT_SYMBOL(ecrt_reg_request_read);
+EXPORT_SYMBOL(ecrt_reg_request_readwrite);
 
 /** \endcond */
 
diff --git a/tool/CommandRegReadWrite.cpp b/tool/CommandRegReadWrite.cpp
new file mode 100644
--- /dev/null
+++ b/tool/CommandRegReadWrite.cpp
@@ -0,0 +1,194 @@
+/*****************************************************************************
+ *
+ *  $Id$
+ *
+ *  Copyright (C) 2006-2012  Florian Pose, Ingenieurgemeinschaft IgH
+ *
+ *  This file is part of the IgH EtherCAT Master.
+ *
+ *  The IgH EtherCAT Master is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License version 2, as
+ *  published by the Free Software Foundation.
+ *
+ *  The IgH EtherCAT Master is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
+ *  Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with the IgH EtherCAT Master; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *  ---
+ *
+ *  The license mentioned above concerns the source code only. Using the
+ *  EtherCAT technology and brand is only permitted in compliance with the
+ *  industrial property and similar rights of Beckhoff Automation GmbH.
+ *
+ ****************************************************************************/
+
+#include <iostream>
+#include <iomanip>
+#include <fstream>
+using namespace std;
+
+#include "CommandRegReadWrite.h"
+#include "sii_crc.h"
+#include "MasterDevice.h"
+
+/*****************************************************************************/
+
+CommandRegReadWrite::CommandRegReadWrite():
+    Command("reg_rdwr", "Read+Write data from/to a slave's registers.")
+{
+}
+
+/*****************************************************************************/
+
+string CommandRegReadWrite::helpString(const string &binaryBaseName) const
+{
+    stringstream str;
+
+    str << binaryBaseName << " " << getName()
+        << " [OPTIONS] <OFFSET> <DATA> <SIZE>" << endl
+        << endl
+        << getBriefDescription() << endl
+        << endl
+        << "This command requires a single slave to be selected." << endl
+        << endl
+        << "Arguments:" << endl
+        << "  ADDRESS is the register address to write to." << endl
+        << "  DATA    is the data to be written, interpreted" << endl
+        << "          respective to the given type." << endl
+        << "  SIZE    is the number of bytes to read-write and must also be" << endl
+        << "          an unsigned 16 bit number. ADDRESS plus SIZE" << endl
+        << "          may not exceed 64k. The size is ignored (and" << endl
+        << "          can be omitted), if a selected data type" << endl
+        << "          implies a size." << endl
+        << endl
+        << typeInfo()
+        << endl
+        << "Command-specific options:" << endl
+        << "  --alias     -a <alias>" << endl
+        << "  --position  -p <pos>    Slave selection. See the help of"
+        << endl
+        << "                          the 'slaves' command." << endl
+        << "  --type      -t <type>   Data type (see above)." << endl
+        << endl
+        << numericInfo();
+
+    return str.str();
+}
+
+/****************************************************************************/
+
+void CommandRegReadWrite::execute(const StringVector &args)
+{
+    stringstream strOffset, err;
+    ec_ioctl_slave_reg_t io;
+    const DataType *dataType = NULL;
+
+    if (args.size() < 2 || args.size() > 3) {
+        err << "'" << getName() << "' takes two or three arguments!";
+        throwInvalidUsageException(err);
+    }
+
+    strOffset << args[0];
+    strOffset
+        >> resetiosflags(ios::basefield) // guess base from prefix
+        >> io.address;
+    if (strOffset.fail()) {
+        err << "Invalid address '" << args[0] << "'!";
+        throwInvalidUsageException(err);
+    }
+
+    if (args.size() > 2) {
+        stringstream strLength;
+        strLength << args[2];
+        strLength
+            >> resetiosflags(ios::basefield) // guess base from prefix
+            >> io.size;
+        if (strLength.fail()) {
+            err << "Invalid size '" << args[1] << "'!";
+            throwInvalidUsageException(err);
+        }
+
+        if (!io.size) {
+            err << "Length may not be zero!";
+            throwInvalidUsageException(err);
+        }
+    } else { // no size argument given
+        io.size = 0;
+    }
+
+    if (!(dataType = findDataType(getDataType()))) {
+        err << "Invalid data type '" << getDataType() << "'!";
+        throwInvalidUsageException(err);
+    }
+
+    if (dataType->byteSize) {
+        // override size argument
+        io.size = dataType->byteSize;
+    }
+
+    if (!io.size) {
+        err << "The size argument is mandatory, if the datatype " << endl
+            << "does not imply a size!";
+        throwInvalidUsageException(err);
+    }
+
+    io.data = new uint8_t[io.size];
+
+    try {
+        io.size = interpretAsType(
+                dataType, args[1], io.data, io.size);
+    } catch (SizeException &e) {
+        delete [] io.data;
+        throwCommandException(e.what());
+    } catch (ios::failure &e) {
+        delete [] io.data;
+        err << "Invalid value argument '" << args[1]
+            << "' for type '" << dataType->name << "'!";
+        throwInvalidUsageException(err);
+    }
+
+    if ((uint32_t) io.address + io.size > 0xffff) {
+        err << "Address and size exceeding 64k!";
+        delete [] io.data;
+        throwInvalidUsageException(err);
+    }
+
+    MasterDevice m(getSingleMasterIndex());
+    try {
+        m.open(MasterDevice::ReadWrite);
+    } catch (MasterDeviceException &e) {
+        delete [] io.data;
+        throw e;
+    }
+
+    SlaveList slaves = selectedSlaves(m);
+    if (slaves.size() != 1) {
+        throwSingleSlaveRequired(slaves.size());
+    }
+    io.slave_position = slaves.front().position;
+    io.emergency = false;
+
+    // send data to master
+    try {
+        m.readWriteReg(&io);
+    } catch (MasterDeviceException &e) {
+        delete [] io.data;
+        throw e;
+    }
+
+    try {
+        outputData(cout, dataType, io.data, io.size);
+    } catch (SizeException &e) {
+        delete [] io.data;
+        throwCommandException(e.what());
+    }
+
+    delete [] io.data;
+}
+
+/*****************************************************************************/
diff --git a/tool/CommandRegReadWrite.h b/tool/CommandRegReadWrite.h
new file mode 100644
--- /dev/null
+++ b/tool/CommandRegReadWrite.h
@@ -0,0 +1,51 @@
+/*****************************************************************************
+ *
+ *  $Id$
+ *
+ *  Copyright (C) 2006-2009  Florian Pose, Ingenieurgemeinschaft IgH
+ *
+ *  This file is part of the IgH EtherCAT Master.
+ *
+ *  The IgH EtherCAT Master is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU General Public License version 2, as
+ *  published by the Free Software Foundation.
+ *
+ *  The IgH EtherCAT Master is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
+ *  Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along
+ *  with the IgH EtherCAT Master; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
+ *
+ *  ---
+ *
+ *  The license mentioned above concerns the source code only. Using the
+ *  EtherCAT technology and brand is only permitted in compliance with the
+ *  industrial property and similar rights of Beckhoff Automation GmbH.
+ *
+ ****************************************************************************/
+
+#ifndef __COMMANDREGREADWRITE_H__
+#define __COMMANDREGREADWRITE_H__
+
+#include "Command.h"
+#include "DataTypeHandler.h"
+
+/****************************************************************************/
+
+class CommandRegReadWrite:
+    public Command,
+    public DataTypeHandler
+{
+    public:
+        CommandRegReadWrite();
+
+        string helpString(const string &) const;
+        void execute(const StringVector &);
+};
+
+/****************************************************************************/
+
+#endif
diff --git a/tool/Makefile.am b/tool/Makefile.am
--- a/tool/Makefile.am
+++ b/tool/Makefile.am
@@ -53,6 +53,7 @@ ethercat_SOURCES = \
 	CommandPdos.cpp \
 	CommandRegRead.cpp \
 	CommandRegWrite.cpp \
+	CommandRegReadWrite.cpp \
 	CommandReboot.cpp \
 	CommandRescan.cpp \
 	CommandSdos.cpp \
@@ -91,6 +92,7 @@ noinst_HEADERS = \
 	CommandPdos.h \
 	CommandRegRead.h \
 	CommandRegWrite.h \
+	CommandRegReadWrite.h \
 	CommandReboot.h \
 	CommandRescan.h \
 	CommandSdos.h \
diff --git a/tool/MasterDevice.cpp b/tool/MasterDevice.cpp
--- a/tool/MasterDevice.cpp
+++ b/tool/MasterDevice.cpp
@@ -436,6 +436,19 @@ void MasterDevice::writeReg(
 
 /****************************************************************************/
 
+void MasterDevice::readWriteReg(
+        ec_ioctl_slave_reg_t *data
+        )
+{
+    if (ioctl(fd, EC_IOCTL_SLAVE_REG_READWRITE, data) < 0) {
+        stringstream err;
+        err << "Failed to read-write register: " << strerror(errno);
+        throw MasterDeviceException(err);
+    }
+}
+
+/****************************************************************************/
+
 void MasterDevice::readFoe(
         ec_ioctl_slave_foe_t *data
         )
diff --git a/tool/MasterDevice.h b/tool/MasterDevice.h
--- a/tool/MasterDevice.h
+++ b/tool/MasterDevice.h
@@ -149,6 +149,7 @@ class MasterDevice
         void writeSii(ec_ioctl_slave_sii_t *);
         void readReg(ec_ioctl_slave_reg_t *);
         void writeReg(ec_ioctl_slave_reg_t *);
+        void readWriteReg(ec_ioctl_slave_reg_t *);
         void setDebug(unsigned int);
         void rescan();
         void sdoDownload(ec_ioctl_slave_sdo_download_t *);
diff --git a/tool/main.cpp b/tool/main.cpp
--- a/tool/main.cpp
+++ b/tool/main.cpp
@@ -56,6 +56,7 @@ using namespace std;
 #include "CommandPdos.h"
 #include "CommandRegRead.h"
 #include "CommandRegWrite.h"
+#include "CommandRegReadWrite.h"
 #include "CommandReboot.h"
 #include "CommandRescan.h"
 #include "CommandSdos.h"
@@ -301,6 +302,7 @@ int main(int argc, char **argv)
     commandList.push_back(new CommandPdos());
     commandList.push_back(new CommandRegRead());
     commandList.push_back(new CommandRegWrite());
+    commandList.push_back(new CommandRegReadWrite());
     commandList.push_back(new CommandReboot());
     commandList.push_back(new CommandRescan());
     commandList.push_back(new CommandSdos());
