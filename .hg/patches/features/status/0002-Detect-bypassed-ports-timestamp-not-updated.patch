From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Wed, 1 Jun 2016 10:00:27 +0200

Detect bypassed ports (timestamp not updated).

diff --git a/include/ecrt.h b/include/ecrt.h
--- a/include/ecrt.h
+++ b/include/ecrt.h
@@ -362,6 +362,7 @@ typedef struct {
     uint8_t link_up; /**< Link detected. */
     uint8_t loop_closed; /**< Loop closed. */
     uint8_t signal_detected; /**< Detected signal on RX port. */
+    uint8_t bypassed; /**< Packets are bypassing this port (eg. redundancy) */
 } ec_slave_port_link_t;
 
 /*****************************************************************************/
diff --git a/lib/master.c b/lib/master.c
--- a/lib/master.c
+++ b/lib/master.c
@@ -283,6 +283,7 @@ int ecrt_master_get_slave(ec_master_t *m
             data.ports[i].link.loop_closed;
         slave_info->ports[i].link.signal_detected =
             data.ports[i].link.signal_detected;
+        slave_info->ports[i].link.bypassed = data.ports[i].link.bypassed;
         slave_info->ports[i].receive_time = data.ports[i].receive_time;
         slave_info->ports[i].next_slave = data.ports[i].next_slave;
         slave_info->ports[i].delay_to_next_dc =
diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -61,6 +61,7 @@ void ec_fsm_master_state_open_port(ec_fs
 #endif
 void ec_fsm_master_state_acknowledge(ec_fsm_master_t *);
 void ec_fsm_master_state_configure_slave(ec_fsm_master_t *);
+void ec_fsm_master_state_dc_read_old_times(ec_fsm_master_t *);
 void ec_fsm_master_state_clear_addresses(ec_fsm_master_t *);
 #ifdef EC_LOOP_CONTROL
 void ec_fsm_master_state_loop_control(ec_fsm_master_t *);
@@ -75,6 +76,7 @@ void ec_fsm_master_state_sdo_dictionary(
 void ec_fsm_master_state_sdo_request(ec_fsm_master_t *);
 void ec_fsm_master_state_reboot_slave(ec_fsm_master_t *);
 
+void ec_fsm_master_enter_dc_read_old_times(ec_fsm_master_t *);
 void ec_fsm_master_enter_clear_addresses(ec_fsm_master_t *);
 void ec_fsm_master_enter_write_system_times(ec_fsm_master_t *);
 
@@ -411,14 +413,7 @@ void ec_fsm_master_state_broadcast(
             master->slave_count = count;
             master->fsm_slave = master->slaves;
 
-            /* start with first device with slaves responding; at least one
-             * has responding slaves, otherwise count would be zero. */
-            fsm->dev_idx = EC_DEVICE_MAIN;
-            while (!fsm->slaves_responding[fsm->dev_idx]) {
-                fsm->dev_idx++;
-            }
-
-            ec_fsm_master_enter_clear_addresses(fsm);
+            ec_fsm_master_enter_dc_read_old_times(fsm);
             return;
         }
     }
@@ -981,6 +976,77 @@ void ec_fsm_master_state_acknowledge(
 
 /*****************************************************************************/
 
+/** Start reading old timestamps from slaves.
+ */
+void ec_fsm_master_enter_dc_read_old_times(
+        ec_fsm_master_t *fsm /**< Master state machine. */
+        )
+{
+    EC_MASTER_DBG(fsm->master, 1, "Reading old port receive times...\n");
+
+    // read DC port receive times
+    // (station addresses not assigned yet, so must APRD.)
+    fsm->slave = fsm->master->slaves;
+    ec_datagram_aprd(fsm->datagram, fsm->slave->ring_position, 0x0900, 16);
+    ec_datagram_zero(fsm->datagram);
+    fsm->datagram->device_index = fsm->slave->device_index;
+    fsm->retries = EC_FSM_RETRIES;
+    fsm->state = ec_fsm_master_state_dc_read_old_times;
+}
+
+/*****************************************************************************/
+
+/** Master state: DC READ OLD TIMES.
+ */
+void ec_fsm_master_state_dc_read_old_times(
+        ec_fsm_master_t *fsm /**< Master state machine. */
+        )
+{
+    ec_master_t *master = fsm->master;
+    ec_slave_t *slave = fsm->slave;
+    ec_datagram_t *datagram = fsm->datagram;
+    int i;
+
+    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
+        return;
+
+    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+        EC_SLAVE_ERR(slave, "Failed to receive DC receive times datagram: ");
+        ec_datagram_print_state(datagram);
+        // continue even on error
+    } else if (datagram->working_counter != 1) {
+        EC_SLAVE_WARN(slave, "Failed to get DC receive times: ");
+        ec_datagram_print_wc_error(datagram);
+        // continue; this is just a warning because at this point we
+        // don't know if the slave supports these registers or not
+    }
+
+    for (i = 0; i < EC_MAX_PORTS; i++) {
+        slave->ports[i].receive_time = EC_READ_U32(datagram->data + 4 * i);
+    }
+
+    ++fsm->slave;
+    if (fsm->slave < master->slaves + master->slave_count) {
+        // read DC port receive times
+        ec_datagram_aprd(datagram, fsm->slave->ring_position, 0x0900, 16);
+        ec_datagram_zero(datagram);
+        datagram->device_index = fsm->slave->device_index;
+        fsm->retries = EC_FSM_RETRIES;
+    } else {
+        /* start with first device with slaves responding; at least one
+         * has responding slaves, otherwise count would be zero. */
+        fsm->dev_idx = EC_DEVICE_MAIN;
+        while (!fsm->slaves_responding[fsm->dev_idx]) {
+            fsm->dev_idx++;
+        }
+
+        fsm->slave = master->slaves;
+        ec_fsm_master_enter_clear_addresses(fsm);
+    }
+}
+
+/*****************************************************************************/
+
 /** Start clearing slave addresses.
  */
 void ec_fsm_master_enter_clear_addresses(
diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -424,7 +424,15 @@ void ec_fsm_slave_scan_state_dc_times(
     }
 
     for (i = 0; i < EC_MAX_PORTS; i++) {
-        slave->ports[i].receive_time = EC_READ_U32(datagram->data + 4 * i);
+        u32 new_time = EC_READ_U32(datagram->data + 4 * i);
+        if (new_time == slave->ports[i].receive_time) {
+            // time has not changed since initial scan; this port has not
+            // processed the broadcast timing datagram.  this can occur
+            // in certain redundancy scenarios.  it can also occur if the
+            // port is closed, so at this stage we can't tell if it's an issue.
+            slave->ports[i].link.bypassed = 1;
+        }
+        slave->ports[i].receive_time = new_time;
     }
 
     ec_fsm_slave_scan_enter_datalink(fsm);
diff --git a/master/ioctl.c b/master/ioctl.c
--- a/master/ioctl.c
+++ b/master/ioctl.c
@@ -294,6 +294,7 @@ static ATTRIBUTES int ec_ioctl_slave(
         data.ports[i].link.loop_closed = slave->ports[i].link.loop_closed;
         data.ports[i].link.signal_detected =
             slave->ports[i].link.signal_detected;
+        data.ports[i].link.bypassed = slave->ports[i].link.bypassed;
         data.ports[i].receive_time = slave->ports[i].receive_time;
         if (slave->ports[i].next_slave) {
             data.ports[i].next_slave =
diff --git a/master/slave.c b/master/slave.c
--- a/master/slave.c
+++ b/master/slave.c
@@ -105,6 +105,7 @@ void ec_slave_init(
         slave->ports[i].link.link_up = 0;
         slave->ports[i].link.loop_closed = 1;
         slave->ports[i].link.signal_detected = 0;
+        slave->ports[i].link.bypassed = 0;
 
         slave->ports[i].receive_time = 0U;
 
diff --git a/tool/CommandSlaves.cpp b/tool/CommandSlaves.cpp
--- a/tool/CommandSlaves.cpp
+++ b/tool/CommandSlaves.cpp
@@ -319,7 +319,8 @@ void CommandSlaves::showSlaves(
             cout << "  " << setw(4)
                 << (si->ports[i].link.link_up ? "up" : "down")
                 << "  " << setw(6)
-                << (si->ports[i].link.loop_closed ? "closed" : "open")
+                << (si->ports[i].link.loop_closed ? "closed" :
+                        (si->ports[i].link.bypassed ? "bypass" : "open"))
                 << "  " << setw(6)
                 << (si->ports[i].link.signal_detected ? "yes" : "no")
                 << "  " << setw(9) << right;
@@ -332,13 +333,15 @@ void CommandSlaves::showSlaves(
 
             if (si->dc_supported) {
                 cout << "  " << setw(11) << right;
-                if (!si->ports[i].link.loop_closed) {
+                if (!si->ports[i].link.loop_closed &&
+                        !si->ports[i].link.bypassed) {
                     cout << dec << si->ports[i].receive_time;
                 } else {
                     cout << "-";
                 }
                 cout << "  " << setw(10);
-                if (!si->ports[i].link.loop_closed) {
+                if (!si->ports[i].link.loop_closed &&
+                        !si->ports[i].link.bypassed) {
                     cout << si->ports[i].receive_time -
                         si->ports[0].receive_time;
                 } else {
