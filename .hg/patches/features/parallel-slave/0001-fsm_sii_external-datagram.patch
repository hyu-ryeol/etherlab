From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Thu, 16 Jun 2016 14:11:25 +1200

Refactor fsm_sii to use externally supplied datagram.

diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -105,7 +105,7 @@ void ec_fsm_master_init(
             &fsm->fsm_change, &fsm->fsm_coe, &fsm->fsm_soe, &fsm->fsm_pdo);
     ec_fsm_slave_scan_init(&fsm->fsm_slave_scan, fsm->datagram,
             &fsm->fsm_slave_config, &fsm->fsm_pdo);
-    ec_fsm_sii_init(&fsm->fsm_sii, fsm->datagram);
+    ec_fsm_sii_init(&fsm->fsm_sii);
 }
 
 /*****************************************************************************/
@@ -1623,7 +1623,7 @@ void ec_fsm_master_state_write_sii(
     ec_sii_write_request_t *request = fsm->sii_request;
     ec_slave_t *slave = request->slave;
 
-    if (ec_fsm_sii_exec(&fsm->fsm_sii)) return;
+    if (ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram)) return;
 
     if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
         EC_SLAVE_ERR(slave, "Failed to write SII data.\n");
@@ -1639,7 +1639,7 @@ void ec_fsm_master_state_write_sii(
                 request->offset + fsm->sii_index,
                 request->words + fsm->sii_index,
                 EC_FSM_SII_USE_CONFIGURED_ADDRESS);
-        ec_fsm_sii_exec(&fsm->fsm_sii); // execute immediately
+        ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram); // execute immediately
         return;
     }
 
diff --git a/master/fsm_sii.c b/master/fsm_sii.c
--- a/master/fsm_sii.c
+++ b/master/fsm_sii.c
@@ -56,14 +56,14 @@
 
 /*****************************************************************************/
 
-void ec_fsm_sii_state_start_reading(ec_fsm_sii_t *);
-void ec_fsm_sii_state_read_check(ec_fsm_sii_t *);
-void ec_fsm_sii_state_read_fetch(ec_fsm_sii_t *);
-void ec_fsm_sii_state_start_writing(ec_fsm_sii_t *);
-void ec_fsm_sii_state_write_check(ec_fsm_sii_t *);
-void ec_fsm_sii_state_write_check2(ec_fsm_sii_t *);
-void ec_fsm_sii_state_end(ec_fsm_sii_t *);
-void ec_fsm_sii_state_error(ec_fsm_sii_t *);
+void ec_fsm_sii_state_start_reading(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_read_check(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_read_fetch(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_start_writing(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_write_check(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_write_check2(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_end(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_state_error(ec_fsm_sii_t *, ec_datagram_t *);
 
 /*****************************************************************************/
 
@@ -71,12 +71,11 @@ void ec_fsm_sii_state_error(ec_fsm_sii_t
    Constructor.
 */
 
-void ec_fsm_sii_init(ec_fsm_sii_t *fsm, /**< finite state machine */
-                     ec_datagram_t *datagram /**< datagram structure to use */
+void ec_fsm_sii_init(ec_fsm_sii_t *fsm /**< finite state machine */
                      )
 {
     fsm->state = NULL;
-    fsm->datagram = datagram;
+    fsm->datagram = NULL;
 }
 
 /*****************************************************************************/
@@ -134,12 +133,31 @@ void ec_fsm_sii_write(ec_fsm_sii_t *fsm,
    \return false, if the state machine has terminated
 */
 
-int ec_fsm_sii_exec(ec_fsm_sii_t *fsm /**< finite state machine */)
+int ec_fsm_sii_exec(ec_fsm_sii_t *fsm, /**< finite state machine */
+                    ec_datagram_t *datagram /**< datagram structure to use */
+                    )
 {
-    fsm->state(fsm);
+    if (fsm->state == ec_fsm_sii_state_end || fsm->state == ec_fsm_sii_state_error)
+        return 0;
+    if (fsm->datagram &&
+            (fsm->datagram->state == EC_DATAGRAM_INIT ||
+             fsm->datagram->state == EC_DATAGRAM_QUEUED ||
+             fsm->datagram->state == EC_DATAGRAM_SENT)) {
+        // datagram not received yet
+        if (datagram != fsm->datagram)
+            datagram->state = EC_DATAGRAM_INVALID;
+        return 1;
+    }
 
-    return fsm->state != ec_fsm_sii_state_end
-        && fsm->state != ec_fsm_sii_state_error;
+    fsm->state(fsm, datagram);
+
+    if (fsm->state == ec_fsm_sii_state_end || fsm->state == ec_fsm_sii_state_error) {
+        fsm->datagram = NULL;
+        return 0;
+    }
+
+    fsm->datagram = datagram;
+    return 1;
 }
 
 /*****************************************************************************/
@@ -155,20 +173,14 @@ int ec_fsm_sii_success(ec_fsm_sii_t *fsm
 }
 
 /******************************************************************************
- * state functions
+ * datagram functions
  *****************************************************************************/
 
-/**
-   SII state: START READING.
-   Starts reading the slave information interface.
-*/
-
-void ec_fsm_sii_state_start_reading(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+static void ec_fsm_sii_prepare_read(
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
-
     // initiate read operation
     switch (fsm->mode) {
         case EC_FSM_SII_USE_INCREMENT_ADDRESS:
@@ -182,6 +194,72 @@ void ec_fsm_sii_state_start_reading(
     EC_WRITE_U8 (datagram->data,     0x80); // two address octets
     EC_WRITE_U8 (datagram->data + 1, 0x01); // request read operation
     EC_WRITE_U16(datagram->data + 2, fsm->word_offset);
+}
+
+/*****************************************************************************/
+
+static void ec_fsm_sii_prepare_read_check(
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    // issue check/fetch datagram
+    switch (fsm->mode) {
+        case EC_FSM_SII_USE_INCREMENT_ADDRESS:
+            ec_datagram_aprd(datagram, fsm->slave->ring_position, 0x502, 10);
+            break;
+        case EC_FSM_SII_USE_CONFIGURED_ADDRESS:
+            ec_datagram_fprd(datagram, fsm->slave->station_address, 0x502, 10);
+            break;
+    }
+
+    ec_datagram_zero(datagram);
+}
+
+/*****************************************************************************/
+
+static void ec_fsm_sii_prepare_write(
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    // initiate write operation
+    ec_datagram_fpwr(datagram, fsm->slave->station_address, 0x502, 8);
+    EC_WRITE_U8 (datagram->data,     0x81); /* two address octets
+                                               + enable write access */
+    EC_WRITE_U8 (datagram->data + 1, 0x02); // request write operation
+    EC_WRITE_U16(datagram->data + 2, fsm->word_offset);
+    memset(datagram->data + 4, 0x00, 2);
+    memcpy(datagram->data + 6, fsm->value, 2);
+}
+
+/*****************************************************************************/
+
+static void ec_fsm_sii_prepare_write_check(
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    // issue check datagram
+    ec_datagram_fprd(datagram, fsm->slave->station_address, 0x502, 2);
+    ec_datagram_zero(datagram);
+}
+
+/******************************************************************************
+ * state functions
+ *****************************************************************************/
+
+/**
+   SII state: START READING.
+   Starts reading the slave information interface.
+*/
+
+void ec_fsm_sii_state_start_reading(
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_fsm_sii_prepare_read(fsm, datagram);
 
 #ifdef SII_DEBUG
     EC_SLAVE_DBG(fsm->slave, 0, "reading SII data, word %u:\n",
@@ -201,42 +279,33 @@ void ec_fsm_sii_state_start_reading(
 */
 
 void ec_fsm_sii_state_read_check(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
-
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
-        fsm->state = ec_fsm_sii_state_error;
-        EC_SLAVE_ERR(fsm->slave, "Failed to receive SII read datagram: ");
-        ec_datagram_print_state(datagram);
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_fsm_sii_prepare_read(fsm, datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_sii_state_error;
-        EC_SLAVE_ERR(fsm->slave, "Reception of SII read datagram failed: ");
-        ec_datagram_print_wc_error(datagram);
+        EC_SLAVE_ERR(fsm->slave, "Failed to receive SII read datagram: ");
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    fsm->jiffies_start = datagram->jiffies_sent;
+    if (fsm->datagram->working_counter != 1) {
+        fsm->state = ec_fsm_sii_state_error;
+        EC_SLAVE_ERR(fsm->slave, "Reception of SII read datagram failed: ");
+        ec_datagram_print_wc_error(fsm->datagram);
+        return;
+    }
+
+    fsm->jiffies_start = fsm->datagram->jiffies_sent;
     fsm->check_once_more = 1;
 
-    // issue check/fetch datagram
-    switch (fsm->mode) {
-        case EC_FSM_SII_USE_INCREMENT_ADDRESS:
-            ec_datagram_aprd(datagram, fsm->slave->ring_position, 0x502, 10);
-            break;
-        case EC_FSM_SII_USE_CONFIGURED_ADDRESS:
-            ec_datagram_fprd(datagram, fsm->slave->station_address, 0x502, 10);
-            break;
-    }
-
-    ec_datagram_zero(datagram);
+    ec_fsm_sii_prepare_read_check(fsm, datagram);
     fsm->retries = EC_FSM_RETRIES;
     fsm->state = ec_fsm_sii_state_read_fetch;
 }
@@ -248,36 +317,37 @@ void ec_fsm_sii_state_read_check(
    Fetches the result of an SII-read datagram.
 */
 void ec_fsm_sii_state_read_fetch(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_fsm_sii_prepare_read_check(fsm, datagram);
+        return;
+    }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_sii_state_error;
         EC_SLAVE_ERR(fsm->slave,
                 "Failed to receive SII check/fetch datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         fsm->state = ec_fsm_sii_state_error;
         EC_SLAVE_ERR(fsm->slave,
                 "Reception of SII check/fetch datagram failed: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
 #ifdef SII_DEBUG
     EC_SLAVE_DBG(fsm->slave, 0, "checking SII read state:\n");
-    ec_print_data(datagram->data, 10);
+    ec_print_data(fsm->datagram->data, 10);
 #endif
 
-    if (EC_READ_U8(datagram->data + 1) & 0x20) {
+    if (EC_READ_U8(fsm->datagram->data + 1) & 0x20) {
         EC_SLAVE_ERR(fsm->slave, "Error on last command while"
                 " reading from SII word 0x%04x.\n", fsm->word_offset);
         fsm->state = ec_fsm_sii_state_error;
@@ -285,11 +355,11 @@ void ec_fsm_sii_state_read_fetch(
     }
 
     // check "busy bit"
-    if (EC_READ_U8(datagram->data + 1) & 0x81) { /* busy bit or
+    if (EC_READ_U8(fsm->datagram->data + 1) & 0x81) { /* busy bit or
                                                     read operation busy */
         // still busy... timeout?
         unsigned long diff_ms =
-            (datagram->jiffies_received - fsm->jiffies_start) * 1000 / HZ;
+            (fsm->datagram->jiffies_received - fsm->jiffies_start) * 1000 / HZ;
         if (diff_ms >= SII_TIMEOUT) {
             if (fsm->check_once_more) {
                 fsm->check_once_more = 0;
@@ -301,12 +371,13 @@ void ec_fsm_sii_state_read_fetch(
         }
 
         // issue check/fetch datagram again
+        ec_fsm_sii_prepare_read_check(fsm, datagram);
         fsm->retries = EC_FSM_RETRIES;
         return;
     }
 
     // SII value received.
-    memcpy(fsm->value, datagram->data + 6, 4);
+    memcpy(fsm->value, fsm->datagram->data + 6, 4);
     fsm->state = ec_fsm_sii_state_end;
 }
 
@@ -318,19 +389,11 @@ void ec_fsm_sii_state_read_fetch(
 */
 
 void ec_fsm_sii_state_start_writing(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
-
-    // initiate write operation
-    ec_datagram_fpwr(datagram, fsm->slave->station_address, 0x502, 8);
-    EC_WRITE_U8 (datagram->data,     0x81); /* two address octets
-                                               + enable write access */
-    EC_WRITE_U8 (datagram->data + 1, 0x02); // request write operation
-    EC_WRITE_U16(datagram->data + 2, fsm->word_offset);
-    memset(datagram->data + 4, 0x00, 2);
-    memcpy(datagram->data + 6, fsm->value, 2);
+    ec_fsm_sii_prepare_write(fsm, datagram);
 
 #ifdef SII_DEBUG
     EC_SLAVE_DBG(fsm->slave, 0, "writing SII data:\n");
@@ -348,34 +411,33 @@ void ec_fsm_sii_state_start_writing(
 */
 
 void ec_fsm_sii_state_write_check(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
-
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
-        fsm->state = ec_fsm_sii_state_error;
-        EC_SLAVE_ERR(fsm->slave, "Failed to receive SII write datagram: ");
-        ec_datagram_print_state(datagram);
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_fsm_sii_prepare_write(fsm, datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_sii_state_error;
-        EC_SLAVE_ERR(fsm->slave, "Reception of SII write datagram failed: ");
-        ec_datagram_print_wc_error(datagram);
+        EC_SLAVE_ERR(fsm->slave, "Failed to receive SII write datagram: ");
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    fsm->jiffies_start = datagram->jiffies_sent;
+    if (fsm->datagram->working_counter != 1) {
+        fsm->state = ec_fsm_sii_state_error;
+        EC_SLAVE_ERR(fsm->slave, "Reception of SII write datagram failed: ");
+        ec_datagram_print_wc_error(fsm->datagram);
+        return;
+    }
+
+    fsm->jiffies_start = fsm->datagram->jiffies_sent;
     fsm->check_once_more = 1;
 
-    // issue check datagram
-    ec_datagram_fprd(datagram, fsm->slave->station_address, 0x502, 2);
-    ec_datagram_zero(datagram);
+    ec_fsm_sii_prepare_write_check(fsm, datagram);
     fsm->retries = EC_FSM_RETRIES;
     fsm->state = ec_fsm_sii_state_write_check2;
 }
@@ -387,37 +449,39 @@ void ec_fsm_sii_state_write_check(
 */
 
 void ec_fsm_sii_state_write_check2(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     unsigned long diff_ms;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_fsm_sii_prepare_write_check(fsm, datagram);
         return;
+    }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_sii_state_error;
         EC_SLAVE_ERR(fsm->slave,
                 "Failed to receive SII write check datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         fsm->state = ec_fsm_sii_state_error;
         EC_SLAVE_ERR(fsm->slave,
                 "Reception of SII write check datagram failed: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
 #ifdef SII_DEBUG
     EC_SLAVE_DBG(fsm->slave, 0, "checking SII write state:\n");
-    ec_print_data(datagram->data, 2);
+    ec_print_data(fsm->datagram->data, 2);
 #endif
 
-    if (EC_READ_U8(datagram->data + 1) & 0x20) {
+    if (EC_READ_U8(fsm->datagram->data + 1) & 0x20) {
         EC_SLAVE_ERR(fsm->slave, "SII: Error on last SII command!\n");
         fsm->state = ec_fsm_sii_state_error;
         return;
@@ -425,7 +489,7 @@ void ec_fsm_sii_state_write_check2(
 
     /* FIXME: some slaves never answer with the busy flag set...
      * wait a few ms for the write operation to complete. */
-    diff_ms = (datagram->jiffies_received - fsm->jiffies_start) * 1000 / HZ;
+    diff_ms = (fsm->datagram->jiffies_received - fsm->jiffies_start) * 1000 / HZ;
     if (diff_ms < SII_INHIBIT) {
 #ifdef SII_DEBUG
         EC_SLAVE_DBG(fsm->slave, 0, "too early.\n");
@@ -435,7 +499,7 @@ void ec_fsm_sii_state_write_check2(
         return;
     }
 
-    if (EC_READ_U8(datagram->data + 1) & 0x82) { /* busy bit or
+    if (EC_READ_U8(fsm->datagram->data + 1) & 0x82) { /* busy bit or
                                                     write operation busy bit */
         // still busy... timeout?
         if (diff_ms >= SII_TIMEOUT) {
@@ -449,11 +513,12 @@ void ec_fsm_sii_state_write_check2(
         }
 
         // issue check datagram again
+        ec_fsm_sii_prepare_write_check(fsm, datagram);
         fsm->retries = EC_FSM_RETRIES;
         return;
     }
 
-    if (EC_READ_U8(datagram->data + 1) & 0x40) {
+    if (EC_READ_U8(fsm->datagram->data + 1) & 0x40) {
         EC_SLAVE_ERR(fsm->slave, "SII: Write operation failed!\n");
         fsm->state = ec_fsm_sii_state_error;
         return;
@@ -470,7 +535,8 @@ void ec_fsm_sii_state_write_check2(
 */
 
 void ec_fsm_sii_state_error(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
 }
@@ -482,7 +548,8 @@ void ec_fsm_sii_state_error(
 */
 
 void ec_fsm_sii_state_end(
-        ec_fsm_sii_t *fsm /**< finite state machine */
+        ec_fsm_sii_t *fsm, /**< finite state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
 }
diff --git a/master/fsm_sii.h b/master/fsm_sii.h
--- a/master/fsm_sii.h
+++ b/master/fsm_sii.h
@@ -64,7 +64,7 @@ struct ec_fsm_sii
     ec_datagram_t *datagram; /**< datagram used in the state machine */
     unsigned int retries; /**< retries upon datagram timeout */
 
-    void (*state)(ec_fsm_sii_t *); /**< SII state function */
+    void (*state)(ec_fsm_sii_t *, ec_datagram_t *); /**< SII state function */
     uint16_t word_offset; /**< input: word offset in SII */
     ec_fsm_sii_addressing_t mode; /**< reading via APRD or NPRD */
     uint8_t value[4]; /**< raw SII value (32bit) */
@@ -74,7 +74,7 @@ struct ec_fsm_sii
 
 /*****************************************************************************/
 
-void ec_fsm_sii_init(ec_fsm_sii_t *, ec_datagram_t *);
+void ec_fsm_sii_init(ec_fsm_sii_t *);
 void ec_fsm_sii_clear(ec_fsm_sii_t *);
 
 void ec_fsm_sii_read(ec_fsm_sii_t *, ec_slave_t *,
@@ -82,7 +82,7 @@ void ec_fsm_sii_read(ec_fsm_sii_t *, ec_
 void ec_fsm_sii_write(ec_fsm_sii_t *, ec_slave_t *, uint16_t,
         const uint16_t *, ec_fsm_sii_addressing_t);
 
-int ec_fsm_sii_exec(ec_fsm_sii_t *);
+int ec_fsm_sii_exec(ec_fsm_sii_t *, ec_datagram_t *);
 int ec_fsm_sii_success(ec_fsm_sii_t *);
 
 /*****************************************************************************/
diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -108,7 +108,7 @@ void ec_fsm_slave_scan_init(
     fsm->fsm_pdo = fsm_pdo;
 
     // init sub state machines
-    ec_fsm_sii_init(&fsm->fsm_sii, fsm->datagram);
+    ec_fsm_sii_init(&fsm->fsm_sii);
 }
 
 /*****************************************************************************/
@@ -736,7 +736,7 @@ void ec_fsm_slave_scan_state_sii_identit
     ec_slave_t *slave = fsm->slave;
 
     while (1) {
-        if (ec_fsm_sii_exec(&fsm->fsm_sii))
+        if (ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram))
             return;
 
         if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
@@ -812,7 +812,7 @@ void ec_fsm_slave_scan_state_sii_device(
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_sii_exec(&fsm->fsm_sii))
+    if (ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram))
         return;
 
     if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
@@ -831,7 +831,7 @@ void ec_fsm_slave_scan_state_sii_device(
         fsm->sii_offset += 2;
         ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
                         EC_FSM_SII_USE_CONFIGURED_ADDRESS);
-        ec_fsm_sii_exec(&fsm->fsm_sii); // execute state immediately
+        ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram); // execute state immediately
         return;
     }
 
@@ -984,7 +984,7 @@ void ec_fsm_slave_scan_state_sii_size(
     ec_slave_t *slave = fsm->slave;
     uint16_t cat_type, cat_size;
 
-    if (ec_fsm_sii_exec(&fsm->fsm_sii))
+    if (ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram))
         return;
 
     if (!slave->sii_image) {
@@ -1019,7 +1019,7 @@ void ec_fsm_slave_scan_state_sii_size(
         fsm->sii_offset = next_offset;
         ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
                         EC_FSM_SII_USE_CONFIGURED_ADDRESS);
-        ec_fsm_sii_exec(&fsm->fsm_sii); // execute state immediately
+        ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram); // execute state immediately
         return;
     }
 
@@ -1056,7 +1056,7 @@ alloc_sii:
     fsm->state = ec_fsm_slave_scan_state_sii_data;
     ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
             EC_FSM_SII_USE_CONFIGURED_ADDRESS);
-    ec_fsm_sii_exec(&fsm->fsm_sii); // execute state immediately
+    ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram); // execute state immediately
 }
 
 /*****************************************************************************/
@@ -1069,7 +1069,7 @@ void ec_fsm_slave_scan_state_sii_data(ec
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_sii_exec(&fsm->fsm_sii)) return;
+    if (ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram)) return;
 
     if (!ec_fsm_sii_success(&fsm->fsm_sii)) {
         fsm->slave->error_flag = 1;
@@ -1098,7 +1098,7 @@ void ec_fsm_slave_scan_state_sii_data(ec
         fsm->sii_offset += 2;
         ec_fsm_sii_read(&fsm->fsm_sii, slave, fsm->sii_offset,
                         EC_FSM_SII_USE_CONFIGURED_ADDRESS);
-        ec_fsm_sii_exec(&fsm->fsm_sii); // execute state immediately
+        ec_fsm_sii_exec(&fsm->fsm_sii, fsm->datagram); // execute state immediately
         return;
     }
 
