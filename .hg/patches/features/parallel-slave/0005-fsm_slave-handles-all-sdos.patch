From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Fri, 17 Jun 2016 13:41:25 +1200

Move all SDO request and dictionary handling to fsm_slave.

diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -72,8 +72,6 @@ void ec_fsm_master_state_dc_read_offset(
 void ec_fsm_master_state_dc_write_offset(ec_fsm_master_t *);
 void ec_fsm_master_state_dc_reset_filter(ec_fsm_master_t *);
 void ec_fsm_master_state_write_sii(ec_fsm_master_t *);
-void ec_fsm_master_state_sdo_dictionary(ec_fsm_master_t *);
-void ec_fsm_master_state_sdo_request(ec_fsm_master_t *);
 void ec_fsm_master_state_reboot_slave(ec_fsm_master_t *);
 
 void ec_fsm_master_enter_dc_read_old_times(ec_fsm_master_t *);
@@ -485,65 +483,6 @@ int ec_fsm_master_action_process_sii(
 
 /*****************************************************************************/
 
-/** Check for pending SDO requests and process one.
- *
- * \return non-zero, if an SDO request is processed.
- */
-int ec_fsm_master_action_process_sdo(
-        ec_fsm_master_t *fsm /**< Master state machine. */
-        )
-{
-    ec_master_t *master = fsm->master;
-    ec_slave_t *slave;
-    ec_sdo_request_t *req;
-
-    // search for internal requests to be processed
-    for (slave = master->slaves;
-            slave < master->slaves + master->slave_count;
-            slave++) {
-
-        if (!slave->config) {
-            continue;
-        }
-
-        if (!ec_fsm_slave_is_ready(&slave->fsm)) {
-            EC_SLAVE_DBG(slave, 2, "Busy - processing external request!\n");
-            continue;
-        }
-
-        list_for_each_entry(req, &slave->config->sdo_requests, list) {
-            if (req->state == EC_INT_REQUEST_QUEUED) {
-
-                if (ec_sdo_request_timed_out(req)) {
-                    req->state = EC_INT_REQUEST_FAILURE;
-                    EC_SLAVE_DBG(slave, 1, "Internal SDO request"
-                            " timed out.\n");
-                    continue;
-                }
-
-                if (slave->current_state == EC_SLAVE_STATE_INIT) {
-                    req->state = EC_INT_REQUEST_FAILURE;
-                    continue;
-                }
-
-                req->state = EC_INT_REQUEST_BUSY;
-                EC_SLAVE_DBG(slave, 1, "Processing internal"
-                        " SDO request...\n");
-                fsm->idle = 0;
-                fsm->sdo_request = req;
-                fsm->slave = slave;
-                fsm->state = ec_fsm_master_state_sdo_request;
-                ec_fsm_coe_transfer(&fsm->fsm_coe, slave, req);
-                ec_fsm_coe_exec(&fsm->fsm_coe, fsm->datagram);
-                return 1;
-            }
-        }
-    }
-    return 0;
-}
-
-/*****************************************************************************/
-
 /** Master action: IDLE.
  *
  * Does secondary work.
@@ -555,49 +494,16 @@ void ec_fsm_master_action_idle(
     ec_master_t *master = fsm->master;
     ec_slave_t *slave;
 
-    // Check for pending internal SDO requests
-    if (ec_fsm_master_action_process_sdo(fsm)) {
-        return;
-    }
-
-    // check, if slaves have an SDO dictionary to read out.
+    // set slaves ready for requests.
     for (slave = master->slaves;
             slave < master->slaves + master->slave_count;
             slave++) {
-#if !EC_SKIP_SDO_DICT
-        if (slave->sii_image && (!(slave->sii_image->sii.mailbox_protocols & EC_MBOX_COE)
-                || (slave->sii_image->sii.has_general
-                    && !slave->sii_image->sii.coe_details.enable_sdo_info)
-                || slave->sdo_dictionary_fetched
-                || slave->current_state == EC_SLAVE_STATE_INIT
-                || slave->current_state == EC_SLAVE_STATE_UNKNOWN
-                || jiffies - slave->jiffies_preop < EC_WAIT_SDO_DICT * HZ
-                )) {
-            if (!(slave->sii_image->sii.mailbox_protocols & EC_MBOX_COE)
-                    || (slave->sii_image->sii.has_general
-                        && !slave->sii_image->sii.coe_details.enable_sdo_info)
-                    ){
-#endif
-                // SDO info not supported. Enable processing of requests
-                ec_fsm_slave_set_ready(&slave->fsm);
-#if !EC_SKIP_SDO_DICT
-            }
-            continue;
+        if (slave->sii_image
+                && !slave->error_flag
+                && slave->current_state != EC_SLAVE_STATE_INIT
+                ) {
+            ec_fsm_slave_set_ready(&slave->fsm);
         }
-
-        EC_SLAVE_DBG(slave, 1, "Fetching SDO dictionary.\n");
-
-        slave->sdo_dictionary_fetched = 1;
-
-        // start fetching SDO dictionary
-        fsm->idle = 0;
-        fsm->slave = slave;
-        fsm->state = ec_fsm_master_state_sdo_dictionary;
-        ec_fsm_coe_dictionary(&fsm->fsm_coe, slave);
-        ec_fsm_coe_exec(&fsm->fsm_coe, fsm->datagram); // execute immediately
-        fsm->datagram->device_index = fsm->slave->device_index;
-        return;
-#endif
     }
 
     // check for pending SII write operations.
@@ -811,6 +717,12 @@ void ec_fsm_master_action_configure(
     if ((slave->current_state != slave->requested_state
                 || slave->force_config) && !slave->error_flag) {
 
+        if (!ec_fsm_slave_set_unready(&slave->fsm)) {
+            // slave FSM is still busy with something; retry later
+            ec_fsm_master_action_next_slave_state(fsm);
+            return;
+        }
+        
         // Start slave configuration
         ec_lock_down(&master->config_sem);
         master->config_busy = 1;
@@ -1672,84 +1584,3 @@ void ec_fsm_master_state_write_sii(
 }
 
 /*****************************************************************************/
-
-/** Master state: SDO DICTIONARY.
- */
-void ec_fsm_master_state_sdo_dictionary(
-        ec_fsm_master_t *fsm /**< Master state machine. */
-        )
-{
-    ec_slave_t *slave = fsm->slave;
-    ec_master_t *master = fsm->master;
-
-    if (ec_fsm_coe_exec(&fsm->fsm_coe, fsm->datagram)) {
-        return;
-    }
-
-    if (!ec_fsm_coe_success(&fsm->fsm_coe)) {
-        ec_fsm_master_restart(fsm);
-        return;
-    }
-
-    // SDO dictionary fetching finished
-
-    if (master->debug_level) {
-        unsigned int sdo_count, entry_count;
-        ec_slave_sdo_dict_info(slave, &sdo_count, &entry_count);
-        EC_SLAVE_DBG(slave, 1, "Fetched %u SDOs and %u entries.\n",
-               sdo_count, entry_count);
-    }
-
-    // enable processing of requests
-    ec_fsm_slave_set_ready(&slave->fsm);
-
-    // attach pdo names from dictionary
-    ec_slave_attach_pdo_names(slave);
-
-    ec_fsm_master_restart(fsm);
-}
-
-/*****************************************************************************/
-
-/** Master state: SDO REQUEST.
- */
-void ec_fsm_master_state_sdo_request(
-        ec_fsm_master_t *fsm /**< Master state machine. */
-        )
-{
-    ec_sdo_request_t *request = fsm->sdo_request;
-
-    if (!request) {
-        // configuration was cleared in the meantime
-        ec_fsm_master_restart(fsm);
-        return;
-    }
-
-    if (ec_fsm_coe_exec(&fsm->fsm_coe, fsm->datagram)) {
-        return;
-    }
-
-    if (!ec_fsm_coe_success(&fsm->fsm_coe)) {
-        EC_SLAVE_DBG(fsm->slave, 1,
-                "Failed to process internal SDO request.\n");
-        request->state = EC_INT_REQUEST_FAILURE;
-        wake_up_all(&fsm->master->request_queue);
-        ec_fsm_master_restart(fsm);
-        return;
-    }
-
-    // SDO request finished
-    request->state = EC_INT_REQUEST_SUCCESS;
-    wake_up_all(&fsm->master->request_queue);
-
-    EC_SLAVE_DBG(fsm->slave, 1, "Finished internal SDO request.\n");
-
-    // check for another SDO request
-    if (ec_fsm_master_action_process_sdo(fsm)) {
-        return; // processing another request
-    }
-
-    ec_fsm_master_restart(fsm);
-}
-
-/*****************************************************************************/
diff --git a/master/fsm_master.h b/master/fsm_master.h
--- a/master/fsm_master.h
+++ b/master/fsm_master.h
@@ -88,7 +88,6 @@ struct ec_fsm_master {
     ec_slave_t *slave; /**< current slave */
     ec_sii_write_request_t *sii_request; /**< SII write request */
     off_t sii_index; /**< index to SII write request data */
-    ec_sdo_request_t *sdo_request; /**< SDO request to process. */
 
     ec_fsm_coe_t fsm_coe; /**< CoE state machine */
     ec_fsm_soe_t fsm_soe; /**< SoE state machine */
diff --git a/master/fsm_slave.c b/master/fsm_slave.c
--- a/master/fsm_slave.c
+++ b/master/fsm_slave.c
@@ -44,6 +44,9 @@
 
 void ec_fsm_slave_state_idle(ec_fsm_slave_t *, ec_datagram_t *);
 void ec_fsm_slave_state_ready(ec_fsm_slave_t *, ec_datagram_t *);
+int ec_fsm_slave_action_process_dict(ec_fsm_slave_t *, ec_datagram_t *);
+void ec_fsm_slave_state_dict_request(ec_fsm_slave_t *, ec_datagram_t *);
+int ec_fsm_slave_action_process_config_sdo(ec_fsm_slave_t *, ec_datagram_t *);
 int ec_fsm_slave_action_process_sdo(ec_fsm_slave_t *, ec_datagram_t *);
 void ec_fsm_slave_state_sdo_request(ec_fsm_slave_t *, ec_datagram_t *);
 int ec_fsm_slave_action_process_reg(ec_fsm_slave_t *, ec_datagram_t *);
@@ -56,8 +59,6 @@ void ec_fsm_slave_state_soe_request(ec_f
 int ec_fsm_slave_action_process_eoe(ec_fsm_slave_t *, ec_datagram_t *);
 void ec_fsm_slave_state_eoe_request(ec_fsm_slave_t *, ec_datagram_t *);
 #endif
-int ec_fsm_slave_action_process_dict(ec_fsm_slave_t *, ec_datagram_t *);
-void ec_fsm_slave_state_dict_request(ec_fsm_slave_t *, ec_datagram_t *);
 
 /*****************************************************************************/
 
@@ -80,6 +81,9 @@ void ec_fsm_slave_init(
 #ifdef EC_EOE
     fsm->eoe_request = NULL;
 #endif
+    fsm->dict_request = NULL;
+
+    ec_dict_request_init(&fsm->int_dict_request);
 
     // Init sub-state-machines
     ec_fsm_coe_init(&fsm->fsm_coe);
@@ -131,6 +135,11 @@ void ec_fsm_slave_clear(
     }
 #endif
 
+    if (fsm->dict_request) {
+        fsm->dict_request->state = EC_INT_REQUEST_FAILURE;
+        wake_up_all(&fsm->slave->master->request_queue);
+    }
+
     // clear sub-state machines
     ec_fsm_coe_clear(&fsm->fsm_coe);
     ec_fsm_foe_clear(&fsm->fsm_foe);
@@ -179,10 +188,239 @@ void ec_fsm_slave_set_ready(
         EC_SLAVE_DBG(fsm->slave, 1, "Ready for requests.\n");
         fsm->state = ec_fsm_slave_state_ready;
     }
-    // Check for pending dictionary requests
-    if (ec_fsm_slave_action_process_dict(fsm, datagram)) {
+}
+
+/*****************************************************************************/
+
+/** Check for pending SDO dictionary reads.
+ *
+ * \return non-zero, if an SDO dictionary read is started.
+ */
+int ec_fsm_slave_action_process_dict(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+    ec_dict_request_t *request;
+
+    // First check if there's an explicit dictionary request to process.
+    if (!list_empty(&slave->dict_requests)) {
+        // take the first request to be processed
+        request = list_entry(slave->dict_requests.next, ec_dict_request_t, list);
+        list_del_init(&request->list); // dequeue
+
+        if (!slave->sii_image) {
+            EC_SLAVE_ERR(slave, "Slave not ready to process dictionary request\n");
+            request->state = EC_INT_REQUEST_FAILURE;
+            wake_up_all(&slave->master->request_queue);
+            fsm->state = ec_fsm_slave_state_idle;
+            return 1;
+        }
+
+        if (!(slave->sii_image->sii.mailbox_protocols & EC_MBOX_COE)
+                || (slave->sii_image->sii.has_general
+                    && !slave->sii_image->sii.coe_details.enable_sdo_info))
+        {
+            EC_SLAVE_INFO(slave, "Aborting dictionary request,"
+                            " slave does not support SDO Info.\n");
+            request->state = EC_INT_REQUEST_SUCCESS;
+            wake_up_all(&slave->master->request_queue);
+            fsm->dict_request = NULL;
+            fsm->state = ec_fsm_slave_state_ready;
+            return 1;
+        }
+
+        if (slave->sdo_dictionary_fetched)
+        {
+            EC_SLAVE_DBG(slave, 1, "Aborting dictionary request,"
+                            " dictionary already uploaded.\n");
+            request->state = EC_INT_REQUEST_SUCCESS;
+            wake_up_all(&slave->master->request_queue);
+            fsm->dict_request = NULL;
+            fsm->state = ec_fsm_slave_state_ready;
+            return 1;
+        }
+
+        if (slave->current_state & EC_SLAVE_STATE_ACK_ERR) {
+            EC_SLAVE_WARN(slave, "Aborting dictionary request,"
+                    " slave has error flag set.\n");
+            request->state = EC_INT_REQUEST_FAILURE;
+            wake_up_all(&slave->master->request_queue);
+            fsm->state = ec_fsm_slave_state_idle;
+            return 1;
+        }
+
+        if (slave->current_state == EC_SLAVE_STATE_INIT) {
+            EC_SLAVE_WARN(slave, "Aborting dictionary request,"
+                    " slave is in INIT.\n");
+            request->state = EC_INT_REQUEST_FAILURE;
+            wake_up_all(&slave->master->request_queue);
+            fsm->state = ec_fsm_slave_state_idle;
+            return 1;
+        }
+
+        fsm->dict_request = request;
+        request->state = EC_INT_REQUEST_BUSY;
+
+        // Found pending dictionary request. Execute it!
+        EC_SLAVE_DBG(slave, 1, "Processing dictionary request...\n");
+
+        // Start dictionary transfer
+        fsm->state = ec_fsm_slave_state_dict_request;
+        ec_fsm_coe_dictionary(&fsm->fsm_coe, slave);
+        ec_fsm_coe_exec(&fsm->fsm_coe, datagram); // execute immediately
+        return 1;
+    }
+
+    // Otherwise check if it's time to fetch the dictionary on startup.
+#if EC_SKIP_SDO_DICT
+    return 0;
+#else
+    if (!slave->sii_image
+            || slave->sdo_dictionary_fetched
+            || slave->current_state == EC_SLAVE_STATE_INIT
+            || slave->current_state == EC_SLAVE_STATE_UNKNOWN
+            || slave->current_state & EC_SLAVE_STATE_ACK_ERR
+            || !(slave->sii_image->sii.mailbox_protocols & EC_MBOX_COE)
+            || (slave->sii_image->sii.has_general
+                    && !slave->sii_image->sii.coe_details.enable_sdo_info)
+            ) {
+        return 0;
+    }
+
+    fsm->dict_request = &fsm->int_dict_request;
+    fsm->int_dict_request.state = EC_INT_REQUEST_BUSY;
+
+    EC_SLAVE_DBG(slave, 1, "Fetching SDO dictionary.\n");
+
+    // Start dictionary transfer
+    fsm->state = ec_fsm_slave_state_dict_request;
+    ec_fsm_coe_dictionary(&fsm->fsm_coe, slave);
+    ec_fsm_coe_exec(&fsm->fsm_coe, datagram); // execute immediately
+    return 1;
+#endif
+}
+
+/*****************************************************************************/
+
+/** Slave state: DICT_REQUEST.
+ */
+void ec_fsm_slave_state_dict_request(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+    ec_dict_request_t *request = fsm->dict_request;
+
+    if (ec_fsm_coe_exec(&fsm->fsm_coe, datagram)) {
         return;
     }
+
+    if (!ec_fsm_coe_success(&fsm->fsm_coe)) {
+        EC_SLAVE_ERR(slave, "Failed to process dictionary request.\n");
+#if !EC_SKIP_SDO_DICT
+        if (request == &fsm->int_dict_request) {
+            // mark as fetched anyway so we don't retry
+            slave->sdo_dictionary_fetched = 1;
+        }
+#endif
+        request->state = EC_INT_REQUEST_FAILURE;
+        wake_up_all(&slave->master->request_queue);
+        fsm->dict_request = NULL;
+        fsm->state = ec_fsm_slave_state_ready;
+        return;
+    }
+
+    if (slave->master->debug_level) {
+        unsigned int sdo_count, entry_count;
+        ec_slave_sdo_dict_info(slave, &sdo_count, &entry_count);
+        EC_SLAVE_DBG(slave, 1, "Fetched %u SDOs and %u entries.\n",
+               sdo_count, entry_count);
+    }
+
+    // Dictionary request finished
+    slave->sdo_dictionary_fetched = 1;
+
+    // attach pdo names from dictionary
+    ec_slave_attach_pdo_names(slave);
+
+    request->state = EC_INT_REQUEST_SUCCESS;
+    wake_up_all(&slave->master->request_queue);
+    fsm->dict_request = NULL;
+    fsm->state = ec_fsm_slave_state_ready;
+}
+
+/*****************************************************************************/
+
+/** Check for pending internal SDO requests and process one.
+ *
+ * \return non-zero, if an SDO request is processed.
+ */
+int ec_fsm_slave_action_process_config_sdo(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+    ec_sdo_request_t *request;
+
+    if (!slave->config) {
+        return 0;
+    }
+
+    list_for_each_entry(request, &slave->config->sdo_requests, list) {
+        if (request->state == EC_INT_REQUEST_QUEUED) {
+            if (ec_sdo_request_timed_out(request)) {
+                request->state = EC_INT_REQUEST_FAILURE;
+                EC_SLAVE_DBG(slave, 1, "Internal SDO request timed out.\n");
+                continue;
+            }
+
+            if (slave->current_state & EC_SLAVE_STATE_ACK_ERR) {
+                EC_SLAVE_WARN(slave, "Aborting SDO request,"
+                        " slave has error flag set.\n");
+                request->state = EC_INT_REQUEST_FAILURE;
+                continue;
+            }
+
+            if (slave->current_state == EC_SLAVE_STATE_INIT) {
+                EC_SLAVE_WARN(slave, "Aborting SDO request, slave is in INIT.\n");
+                request->state = EC_INT_REQUEST_FAILURE;
+                continue;
+            }
+
+            request->state = EC_INT_REQUEST_BUSY;
+            EC_SLAVE_DBG(slave, 1, "Processing internal SDO request...\n");
+            fsm->sdo_request = request;
+            fsm->state = ec_fsm_slave_state_sdo_request;
+            ec_fsm_coe_transfer(&fsm->fsm_coe, slave, request);
+            ec_fsm_coe_exec(&fsm->fsm_coe, datagram);
+            return 1;
+        }
+    }
+    return 0;
+}
+
+/*****************************************************************************/
+
+/** Sets the current state of the state machine to IDLE
+ * 
+ * \return Non-zero if successful; otherwise state machine is busy.
+ */
+int ec_fsm_slave_set_unready(
+        ec_fsm_slave_t *fsm /**< Slave state machine. */
+        )
+{
+    if (fsm->state == ec_fsm_slave_state_idle) {
+        return 1;
+    } else if (fsm->state == ec_fsm_slave_state_ready) {
+        EC_SLAVE_DBG(fsm->slave, 1, "Unready for requests.\n");
+        fsm->state = ec_fsm_slave_state_idle;
+        return 1;
+    }
+    return 0;
 }
 
 /*****************************************************************************/
@@ -221,18 +459,16 @@ void ec_fsm_slave_state_ready(
         ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_slave_t *slave = fsm->slave;
-    ec_sdo_request_t *req;
-
-    if (slave->config) {
-        list_for_each_entry(req, &slave->config->sdo_requests, list) {
-            if (req->state == EC_INT_REQUEST_QUEUED || req->state == EC_INT_REQUEST_BUSY) {
-                EC_SLAVE_DBG(slave, 2, "Busy - processing internal SDO request %04X:%02X!\n", req->index, req->subindex);
-                return;
-            }
-        }
+    // Check for pending internal SDO requests
+    if (ec_fsm_slave_action_process_config_sdo(fsm, datagram)) {
+        return;
     }
 
+    // Check if the slave needs to read the SDO dictionary
+    if (ec_fsm_slave_action_process_dict(fsm, datagram)) {
+        return;
+    }
+    
     // Check for pending external SDO requests
     if (ec_fsm_slave_action_process_sdo(fsm, datagram)) {
         return;
@@ -667,129 +903,6 @@ void ec_fsm_slave_state_soe_request(
 }
 
 /*****************************************************************************/
-
-/** Check for pending dictionary requests and process one.
- *
- * \return non-zero, if a request is processed.
- */
-int ec_fsm_slave_action_process_dict(
-        ec_fsm_slave_t *fsm, /**< Slave state machine. */
-        ec_datagram_t *datagram /**< Datagram to use. */
-        )
-{
-    ec_slave_t *slave = fsm->slave;
-    ec_dict_request_t *request;
-
-    if (list_empty(&slave->dict_requests)) {
-        return 0;
-    }
-
-    // take the first request to be processed
-    request = list_entry(slave->dict_requests.next, ec_dict_request_t, list);
-    list_del_init(&request->list); // dequeue
-
-    if (!slave->sii_image) {
-        EC_SLAVE_ERR(slave, "Slave not ready to process dictionary request\n");
-        request->state = EC_INT_REQUEST_FAILURE;
-        wake_up_all(&slave->master->request_queue);
-        fsm->state = ec_fsm_slave_state_idle;
-        return 1;
-    }
-
-    if (!(slave->sii_image->sii.mailbox_protocols & EC_MBOX_COE)
-            || (slave->sii_image->sii.has_general
-                && !slave->sii_image->sii.coe_details.enable_sdo_info))
-    {
-        EC_SLAVE_INFO(slave, "Aborting dictionary request,"
-                        " slave does not support SDO Info.\n");
-        request->state = EC_INT_REQUEST_SUCCESS;
-        wake_up_all(&slave->master->request_queue);
-        fsm->dict_request = NULL;
-        fsm->state = ec_fsm_slave_state_ready;
-        return 1;
-    }
-
-    if (slave->sdo_dictionary_fetched)
-    {
-        EC_SLAVE_DBG(slave, 1, "Aborting dictionary request,"
-                        " dictionary already uploaded.\n");
-        request->state = EC_INT_REQUEST_SUCCESS;
-        wake_up_all(&slave->master->request_queue);
-        fsm->dict_request = NULL;
-        fsm->state = ec_fsm_slave_state_ready;
-        return 1;
-    }
-
-    if (slave->current_state & EC_SLAVE_STATE_ACK_ERR) {
-        EC_SLAVE_WARN(slave, "Aborting dictionary request,"
-                " slave has error flag set.\n");
-        request->state = EC_INT_REQUEST_FAILURE;
-        wake_up_all(&slave->master->request_queue);
-        fsm->state = ec_fsm_slave_state_idle;
-        return 1;
-    }
-
-    if (slave->current_state == EC_SLAVE_STATE_INIT) {
-        EC_SLAVE_WARN(slave, "Aborting dictioanry request, slave is in INIT.\n");
-        request->state = EC_INT_REQUEST_FAILURE;
-        wake_up_all(&slave->master->request_queue);
-        fsm->state = ec_fsm_slave_state_idle;
-        return 1;
-    }
-
-    fsm->dict_request = request;
-    request->state = EC_INT_REQUEST_BUSY;
-
-    // Found pending dictionary request. Execute it!
-    EC_SLAVE_DBG(slave, 1, "Processing dictionary request...\n");
-
-    // Start dictionary transfer
-    fsm->state = ec_fsm_slave_state_dict_request;
-    ec_fsm_coe_dictionary(&fsm->fsm_coe, slave);
-    ec_fsm_coe_exec(&fsm->fsm_coe, datagram); // execute immediately
-    return 1;
-}
-
-/*****************************************************************************/
-
-/** Slave state: DICT_REQUEST.
- */
-void ec_fsm_slave_state_dict_request(
-        ec_fsm_slave_t *fsm, /**< Slave state machine. */
-        ec_datagram_t *datagram /**< Datagram to use. */
-        )
-{
-    ec_slave_t *slave = fsm->slave;
-    ec_dict_request_t *request = fsm->dict_request;
-
-    if (ec_fsm_coe_exec(&fsm->fsm_coe, datagram)) {
-        return;
-    }
-
-    if (!ec_fsm_coe_success(&fsm->fsm_coe)) {
-        EC_SLAVE_ERR(slave, "Failed to process dictionary request.\n");
-        request->state = EC_INT_REQUEST_FAILURE;
-        wake_up_all(&slave->master->request_queue);
-        fsm->dict_request = NULL;
-        fsm->state = ec_fsm_slave_state_ready;
-        return;
-    }
-
-    EC_SLAVE_DBG(slave, 1, "Finished dictionary request.\n");
-
-    // Dictionary request finished
-    slave->sdo_dictionary_fetched = 1;
-
-    // attach pdo names from dictionary
-    ec_slave_attach_pdo_names(slave);
-
-    request->state = EC_INT_REQUEST_SUCCESS;
-    wake_up_all(&slave->master->request_queue);
-    fsm->dict_request = NULL;
-    fsm->state = ec_fsm_slave_state_ready;
-}
-
-/*****************************************************************************/
 #ifdef EC_EOE
 /** Check for pending EoE IP parameter requests and process one.
  *
diff --git a/master/fsm_slave.h b/master/fsm_slave.h
--- a/master/fsm_slave.h
+++ b/master/fsm_slave.h
@@ -59,6 +59,7 @@ typedef struct ec_fsm_slave ec_fsm_slave
 struct ec_fsm_slave {
     ec_slave_t *slave; /**< slave the FSM runs on */
     struct list_head list; /**< Used for execution list. */
+    ec_dict_request_t int_dict_request; /**< Internal dictionary request. */
 
     void (*state)(ec_fsm_slave_t *, ec_datagram_t *); /**< State function. */
     ec_datagram_t *datagram; /**< Previous state datagram. */
@@ -87,6 +88,7 @@ void ec_fsm_slave_clear(ec_fsm_slave_t *
 
 int ec_fsm_slave_exec(ec_fsm_slave_t *, ec_datagram_t *);
 void ec_fsm_slave_set_ready(ec_fsm_slave_t *);
+int ec_fsm_slave_set_unready(ec_fsm_slave_t *);
 int ec_fsm_slave_is_ready(const ec_fsm_slave_t *);
 
 /*****************************************************************************/
diff --git a/master/globals.h b/master/globals.h
--- a/master/globals.h
+++ b/master/globals.h
@@ -58,10 +58,6 @@
 /** Number of state machine retries on datagram timeout. */
 #define EC_FSM_RETRIES 3
 
-/** Seconds to wait before fetching SDO dictionary
-    after slave entered PREOP state. */
-#define EC_WAIT_SDO_DICT 3
-
 /** If set, skip fetching SDO dictionary during slave scan. */
 #define EC_SKIP_SDO_DICT 1
 
diff --git a/master/master.c b/master/master.c
--- a/master/master.c
+++ b/master/master.c
@@ -476,7 +476,6 @@ void ec_master_clear_slave_configs(ec_ma
     ec_slave_config_t *sc, *next;
 
     master->dc_ref_config = NULL;
-    master->fsm.sdo_request = NULL; // mark sdo_request as invalid
 
     list_for_each_entry_safe(sc, next, &master->configs, list) {
         list_del(&sc->list);
