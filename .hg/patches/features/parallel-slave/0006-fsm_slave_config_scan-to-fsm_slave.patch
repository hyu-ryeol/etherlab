From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Fri, 17 Jun 2016 17:12:50 +1200

Move fsm_slave_scan and fsm_slave_config to fsm_slave.

Allows these to occur in parallel between slaves.  This
improves performance on large networks.

diff --git a/include/ecrt.h b/include/ecrt.h
--- a/include/ecrt.h
+++ b/include/ecrt.h
@@ -397,6 +397,7 @@ typedef struct {
     uint8_t upstream_port; /**< Index of upstream (master facing) port */
     uint8_t al_state; /**< Current state of the slave. */
     uint8_t error_flag; /**< Error flag for that slave. */
+    uint8_t scan_required; /**< The slave is being scanned. */
     uint8_t ready; /**< The slave is ready for external requests. */
     uint8_t sync_count; /**< Number of sync managers. */
     uint16_t sdo_count; /**< Number of SDOs. */
diff --git a/lib/master.c b/lib/master.c
--- a/lib/master.c
+++ b/lib/master.c
@@ -293,6 +293,7 @@ int ecrt_master_get_slave(ec_master_t *m
     slave_info->upstream_port = data.upstream_port;
     slave_info->al_state = data.al_state;
     slave_info->error_flag = data.error_flag;
+    slave_info->scan_required = data.scan_required;
     slave_info->ready = data.ready;
     slave_info->sync_count = data.sync_count;
     slave_info->sdo_count = data.sdo_count;
diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -59,8 +59,6 @@ void ec_fsm_master_state_read_al_status(
 void ec_fsm_master_state_read_dl_status(ec_fsm_master_t *);
 void ec_fsm_master_state_open_port(ec_fsm_master_t *);
 #endif
-void ec_fsm_master_state_acknowledge(ec_fsm_master_t *);
-void ec_fsm_master_state_configure_slave(ec_fsm_master_t *);
 void ec_fsm_master_state_dc_read_old_times(ec_fsm_master_t *);
 void ec_fsm_master_state_clear_addresses(ec_fsm_master_t *);
 #ifdef EC_LOOP_CONTROL
@@ -94,15 +92,7 @@ void ec_fsm_master_init(
     ec_fsm_master_reset(fsm);
 
     // init sub-state-machines
-    ec_fsm_coe_init(&fsm->fsm_coe);
-    ec_fsm_soe_init(&fsm->fsm_soe);
-    ec_fsm_pdo_init(&fsm->fsm_pdo, &fsm->fsm_coe);
-    ec_fsm_change_init(&fsm->fsm_change);
     ec_fsm_reboot_init(&fsm->fsm_reboot, fsm->datagram);
-    ec_fsm_slave_config_init(&fsm->fsm_slave_config,
-            &fsm->fsm_change, &fsm->fsm_coe, &fsm->fsm_soe, &fsm->fsm_pdo);
-    ec_fsm_slave_scan_init(&fsm->fsm_slave_scan,
-            &fsm->fsm_slave_config, &fsm->fsm_pdo);
     ec_fsm_sii_init(&fsm->fsm_sii);
 }
 
@@ -115,13 +105,7 @@ void ec_fsm_master_clear(
         )
 {
     // clear sub-state machines
-    ec_fsm_coe_clear(&fsm->fsm_coe);
-    ec_fsm_soe_clear(&fsm->fsm_soe);
-    ec_fsm_pdo_clear(&fsm->fsm_pdo);
-    ec_fsm_change_clear(&fsm->fsm_change);
     ec_fsm_reboot_clear(&fsm->fsm_reboot);
-    ec_fsm_slave_config_clear(&fsm->fsm_slave_config);
-    ec_fsm_slave_scan_clear(&fsm->fsm_slave_scan);
     ec_fsm_sii_clear(&fsm->fsm_sii);
 }
 
@@ -309,6 +293,10 @@ void ec_fsm_master_state_broadcast(
         ec_master_clear_slaves(master);
         ec_master_clear_sii_images(master);
 
+        ec_lock_down(&master->config_sem);
+        master->config_busy = 0;
+        ec_lock_up(&master->config_sem);
+
         for (dev_idx = EC_DEVICE_MAIN;
                 dev_idx < ec_master_num_devices(master); dev_idx++) {
             fsm->slave_states[dev_idx] = 0x00;
@@ -364,6 +352,10 @@ void ec_fsm_master_state_broadcast(
             ec_master_clear_slaves(master);
             ec_master_clear_sii_images(master);
 
+            ec_lock_down(&master->config_sem);
+            master->config_busy = 0;
+            ec_lock_up(&master->config_sem);
+
             for (dev_idx = EC_DEVICE_MAIN;
                     dev_idx < ec_master_num_devices(master); dev_idx++) {
                 count += fsm->slaves_responding[dev_idx];
@@ -491,25 +483,10 @@ void ec_fsm_master_action_idle(
         ec_fsm_master_t *fsm /**< Master state machine. */
         )
 {
-    ec_master_t *master = fsm->master;
-    ec_slave_t *slave;
-
-    // set slaves ready for requests.
-    for (slave = master->slaves;
-            slave < master->slaves + master->slave_count;
-            slave++) {
-        if (slave->sii_image
-                && !slave->error_flag
-                && slave->current_state != EC_SLAVE_STATE_INIT
-                ) {
-            ec_fsm_slave_set_ready(&slave->fsm);
-        }
-    }
-
     // check for pending SII write operations.
     if (ec_fsm_master_action_process_sii(fsm)) {
         return; // SII write request found
-	}
+    }
 
     ec_fsm_master_restart(fsm);
 }
@@ -696,7 +673,6 @@ void ec_fsm_master_action_configure(
         )
 {
     ec_master_t *master = fsm->master;
-    ec_slave_t *slave = fsm->slave;
 
     if (master->config_changed) {
         master->config_changed = 0;
@@ -713,50 +689,8 @@ void ec_fsm_master_action_configure(
         return;
     }
 
-    // Does the slave have to be configured?
-    if ((slave->current_state != slave->requested_state
-                || slave->force_config) && !slave->error_flag) {
-
-        if (!ec_fsm_slave_set_unready(&slave->fsm)) {
-            // slave FSM is still busy with something; retry later
-            ec_fsm_master_action_next_slave_state(fsm);
-            return;
-        }
-        
-        // Start slave configuration
-        ec_lock_down(&master->config_sem);
-        master->config_busy = 1;
-        ec_lock_up(&master->config_sem);
-
-        if (master->debug_level) {
-            char old_state[EC_STATE_STRING_SIZE],
-                 new_state[EC_STATE_STRING_SIZE];
-            ec_state_string(slave->current_state, old_state, 0);
-            ec_state_string(slave->requested_state, new_state, 0);
-            EC_SLAVE_DBG(slave, 1, "Changing state from %s to %s%s.\n",
-                    old_state, new_state,
-                    slave->force_config ? " (forced)" : "");
-        }
-
-        fsm->idle = 0;
-        fsm->state = ec_fsm_master_state_configure_slave;
-#ifdef EC_QUICK_OP
-        if (!slave->force_config
-                && slave->current_state == EC_SLAVE_STATE_SAFEOP
-                && slave->requested_state == EC_SLAVE_STATE_OP
-                && slave->last_al_error == 0x001B) {
-            // last error was a sync watchdog timeout; assume a comms
-            // interruption and request a quick transition back to OP
-            ec_fsm_slave_config_quick_start(&fsm->fsm_slave_config, slave);
-        } else
-#endif
-        {
-            ec_fsm_slave_config_start(&fsm->fsm_slave_config, slave);
-        }
-        fsm->state(fsm); // execute immediately
-        fsm->datagram->device_index = fsm->slave->device_index;
-        return;
-    }
+    // allow slave to start config (if not already done).
+    ec_fsm_slave_set_ready(&fsm->slave->fsm);
 
 #ifdef EC_LOOP_CONTROL
     // read DL status
@@ -816,16 +750,7 @@ void ec_fsm_master_state_read_al_status(
     }
 
     if (!slave->error_flag) {
-        // Check, if new slave state has to be acknowledged
-        if (slave->current_state & EC_SLAVE_STATE_ACK_ERR) {
-            fsm->idle = 0;
-            fsm->state = ec_fsm_master_state_acknowledge;
-            ec_fsm_change_ack(&fsm->fsm_change, slave);
-            fsm->state(fsm); // execute immediately
-            return;
-        }
-
-        // No acknowlegde necessary; check for configuration
+        // Check for configuration
         ec_fsm_master_action_configure(fsm);
         return;
     }
@@ -866,28 +791,6 @@ void ec_fsm_master_state_reboot_slave(
 
 /*****************************************************************************/
 
-/** Master state: ACKNOWLEDGE.
- */
-void ec_fsm_master_state_acknowledge(
-        ec_fsm_master_t *fsm /**< Master state machine. */
-        )
-{
-    ec_slave_t *slave = fsm->slave;
-
-    if (ec_fsm_change_exec(&fsm->fsm_change, fsm->datagram)) {
-        return;
-    }
-
-    if (!ec_fsm_change_success(&fsm->fsm_change)) {
-        fsm->slave->error_flag = 1;
-        EC_SLAVE_ERR(slave, "Failed to acknowledge state change.\n");
-    }
-
-    ec_fsm_master_action_configure(fsm);
-}
-
-/*****************************************************************************/
-
 /** Start reading old timestamps from slaves.
  */
 void ec_fsm_master_enter_dc_read_old_times(
@@ -1090,6 +993,7 @@ void ec_fsm_master_state_dc_measure_dela
 {
     ec_master_t *master = fsm->master;
     ec_datagram_t *datagram = fsm->datagram;
+    ec_slave_t *slave;
 
     if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
         return;
@@ -1120,65 +1024,39 @@ void ec_fsm_master_state_dc_measure_dela
 
     EC_MASTER_INFO(master, "Scanning bus.\n");
 
-    // begin scanning of slaves
-    fsm->slave = master->slaves;
-    EC_MASTER_DBG(master, 1, "Scanning slave %u on %s link.\n",
-            fsm->slave->ring_position,
-            ec_device_names[fsm->slave->device_index != 0]);
+    // set slaves ready for requests (begins scan).
+    for (slave = master->slaves;
+            slave < master->slaves + master->slave_count;
+            slave++) {
+        ec_fsm_slave_set_ready(&slave->fsm);
+    }
+
     fsm->state = ec_fsm_master_state_scan_slave;
-    ec_fsm_slave_scan_start(&fsm->fsm_slave_scan, fsm->slave);
-    ec_fsm_slave_scan_exec(&fsm->fsm_slave_scan, fsm->datagram); // execute immediately
-    fsm->datagram->device_index = fsm->slave->device_index;
+    fsm->datagram->state = EC_DATAGRAM_INVALID; // nothing to send
+    fsm->state(fsm);    // execute immediately
 }
 
 /*****************************************************************************/
 
 /** Master state: SCAN SLAVE.
  *
- * Executes the sub-statemachine for the scanning of a slave.
+ * Waits until slave scanning is completed.
  */
 void ec_fsm_master_state_scan_slave(
         ec_fsm_master_t *fsm /**< Master state machine. */
         )
 {
     ec_master_t *master = fsm->master;
-#ifdef EC_EOE
-    ec_slave_t *slave = fsm->slave;
-#endif
-
-    if (ec_fsm_slave_scan_exec(&fsm->fsm_slave_scan, fsm->datagram)) {
-        return;
-    }
-    // Assume that the slaves mailbox data is valid even if the slave scanning skipped
-    // the clear mailbox state, e.g. if the slave refused to enter state INIT.
-    fsm->slave->valid_mbox_data = 1;
+    ec_slave_t *slave;
 
-#ifdef EC_EOE
-    if (slave->sii_image && (slave->sii_image->sii.mailbox_protocols & EC_MBOX_EOE)) {
-        // create EoE handler for this slave
-        ec_eoe_t *eoe;
-        if (!(eoe = kmalloc(sizeof(ec_eoe_t), GFP_KERNEL))) {
-            EC_SLAVE_ERR(slave, "Failed to allocate EoE handler memory!\n");
-        } else if (ec_eoe_init(eoe, slave)) {
-            EC_SLAVE_ERR(slave, "Failed to init EoE handler!\n");
-            kfree(eoe);
-        } else {
-            list_add_tail(&eoe->list, &master->eoe_handlers);
+    for (slave = master->slaves;
+            slave < master->slaves + master->slave_count;
+            slave++) {
+        if (slave->scan_required && !slave->error_flag) {
+            // still in progress
+            return;
         }
     }
-#endif
-
-    // another slave to fetch?
-    fsm->slave++;
-    if (fsm->slave < master->slaves + master->slave_count) {
-        EC_MASTER_DBG(master, 1, "Scanning slave %u on %s link.\n",
-                fsm->slave->ring_position,
-                ec_device_names[fsm->slave->device_index != 0]);
-        ec_fsm_slave_scan_start(&fsm->fsm_slave_scan, fsm->slave);
-        ec_fsm_slave_scan_exec(&fsm->fsm_slave_scan, fsm->datagram); // execute immediately
-        fsm->datagram->device_index = fsm->slave->device_index;
-        return;
-    }
 
     EC_MASTER_INFO(master, "Bus scanning completed in %lu ms.\n",
             (jiffies - fsm->scan_jiffies) * 1000 / HZ);
@@ -1212,43 +1090,6 @@ void ec_fsm_master_state_scan_slave(
 
 /*****************************************************************************/
 
-/** Master state: CONFIGURE SLAVE.
- *
- * Starts configuring a slave.
- */
-void ec_fsm_master_state_configure_slave(
-        ec_fsm_master_t *fsm /**< Master state machine. */
-        )
-{
-    ec_master_t *master = fsm->master;
-
-    if (ec_fsm_slave_config_exec(&fsm->fsm_slave_config, fsm->datagram)) {
-        return;
-    }
-
-    fsm->slave->force_config = 0;
-
-    // configuration finished
-    master->config_busy = 0;
-    wake_up_interruptible(&master->config_queue);
-
-    if (!ec_fsm_slave_config_success(&fsm->fsm_slave_config)) {
-        // TODO: mark slave_config as failed.
-    }
-
-    fsm->idle = 1;
-
-#ifdef EC_LOOP_CONTROL
-    // read DL status
-    ec_fsm_master_action_read_dl_status(fsm);
-#else
-    // process next slave
-    ec_fsm_master_action_next_slave_state(fsm);
-#endif
-}
-
-/*****************************************************************************/
-
 /** Start writing DC system times.
  */
 void ec_fsm_master_enter_write_system_times(
diff --git a/master/fsm_master.h b/master/fsm_master.h
--- a/master/fsm_master.h
+++ b/master/fsm_master.h
@@ -42,9 +42,6 @@
 #include "foe_request.h"
 #include "sdo_request.h"
 #include "soe_request.h"
-#include "fsm_slave_config.h"
-#include "fsm_slave_scan.h"
-#include "fsm_pdo.h"
 #include "fsm_reboot.h"
 
 /*****************************************************************************/
@@ -89,13 +86,7 @@ struct ec_fsm_master {
     ec_sii_write_request_t *sii_request; /**< SII write request */
     off_t sii_index; /**< index to SII write request data */
 
-    ec_fsm_coe_t fsm_coe; /**< CoE state machine */
-    ec_fsm_soe_t fsm_soe; /**< SoE state machine */
-    ec_fsm_pdo_t fsm_pdo; /**< PDO configuration state machine. */
-    ec_fsm_change_t fsm_change; /**< State change state machine */
     ec_fsm_reboot_t fsm_reboot; /**< Slave reboot state machine */
-    ec_fsm_slave_config_t fsm_slave_config; /**< slave state machine */
-    ec_fsm_slave_scan_t fsm_slave_scan; /**< slave state machine */
     ec_fsm_sii_t fsm_sii; /**< SII state machine */
 };
 
diff --git a/master/fsm_slave.c b/master/fsm_slave.c
--- a/master/fsm_slave.c
+++ b/master/fsm_slave.c
@@ -44,6 +44,11 @@
 
 void ec_fsm_slave_state_idle(ec_fsm_slave_t *, ec_datagram_t *);
 void ec_fsm_slave_state_ready(ec_fsm_slave_t *, ec_datagram_t *);
+int ec_fsm_slave_action_scan(ec_fsm_slave_t *, ec_datagram_t *);
+void ec_fsm_slave_state_scan(ec_fsm_slave_t *, ec_datagram_t *);
+int ec_fsm_slave_action_config(ec_fsm_slave_t *, ec_datagram_t *);
+void ec_fsm_slave_state_acknowledge(ec_fsm_slave_t *, ec_datagram_t *);
+void ec_fsm_slave_state_config(ec_fsm_slave_t *, ec_datagram_t *);
 int ec_fsm_slave_action_process_dict(ec_fsm_slave_t *, ec_datagram_t *);
 void ec_fsm_slave_state_dict_request(ec_fsm_slave_t *, ec_datagram_t *);
 int ec_fsm_slave_action_process_config_sdo(ec_fsm_slave_t *, ec_datagram_t *);
@@ -92,6 +97,12 @@ void ec_fsm_slave_init(
 #ifdef EC_EOE
     ec_fsm_eoe_init(&fsm->fsm_eoe);
 #endif
+    ec_fsm_pdo_init(&fsm->fsm_pdo, &fsm->fsm_coe);
+    ec_fsm_change_init(&fsm->fsm_change);
+    ec_fsm_slave_config_init(&fsm->fsm_slave_config, fsm->slave,
+            &fsm->fsm_change, &fsm->fsm_coe, &fsm->fsm_soe, &fsm->fsm_pdo);
+    ec_fsm_slave_scan_init(&fsm->fsm_slave_scan, fsm->slave,
+            &fsm->fsm_slave_config, &fsm->fsm_pdo);
 }
 
 /*****************************************************************************/
@@ -141,6 +152,10 @@ void ec_fsm_slave_clear(
     }
 
     // clear sub-state machines
+    ec_fsm_slave_scan_clear(&fsm->fsm_slave_scan);
+    ec_fsm_slave_config_clear(&fsm->fsm_slave_config);
+    ec_fsm_change_clear(&fsm->fsm_change);
+    ec_fsm_pdo_clear(&fsm->fsm_pdo);
     ec_fsm_coe_clear(&fsm->fsm_coe);
     ec_fsm_foe_clear(&fsm->fsm_foe);
     ec_fsm_soe_clear(&fsm->fsm_soe);
@@ -168,6 +183,7 @@ int ec_fsm_slave_exec(
         fsm->state != ec_fsm_slave_state_ready;
 
     if (datagram_used) {
+        datagram->device_index = fsm->slave->device_index;
         fsm->datagram = datagram;
     } else {
         fsm->datagram = NULL;
@@ -192,6 +208,188 @@ void ec_fsm_slave_set_ready(
 
 /*****************************************************************************/
 
+/** Check for pending scan.
+ *
+ * \return non-zero, if scan is started.
+ */
+int ec_fsm_slave_action_scan(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    if (!slave->scan_required) {
+        return 0;
+    }
+
+    EC_SLAVE_DBG(slave, 1, "Scanning slave %u on %s link.\n",
+            slave->ring_position, ec_device_names[slave->device_index != 0]);
+    fsm->state = ec_fsm_slave_state_scan;
+    ec_fsm_slave_scan_start(&fsm->fsm_slave_scan);
+    ec_fsm_slave_scan_exec(&fsm->fsm_slave_scan, datagram); // execute immediately
+    return 1;
+}
+
+/*****************************************************************************/
+
+/** Slave state: SCAN.
+ */
+void ec_fsm_slave_state_scan(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    if (ec_fsm_slave_scan_exec(&fsm->fsm_slave_scan, datagram)) {
+        return;
+    }
+
+    // Assume that the slaves mailbox data is valid even if the slave scanning skipped
+    // the clear mailbox state, e.g. if the slave refused to enter state INIT.
+    slave->valid_mbox_data = 1;
+
+#ifdef EC_EOE
+    if (slave->sii_image && (slave->sii_image->sii.mailbox_protocols & EC_MBOX_EOE)) {
+        // create EoE handler for this slave
+        ec_eoe_t *eoe;
+        if (!(eoe = kmalloc(sizeof(ec_eoe_t), GFP_KERNEL))) {
+            EC_SLAVE_ERR(slave, "Failed to allocate EoE handler memory!\n");
+        } else if (ec_eoe_init(eoe, slave)) {
+            EC_SLAVE_ERR(slave, "Failed to init EoE handler!\n");
+            kfree(eoe);
+        } else {
+            list_add_tail(&eoe->list, &slave->master->eoe_handlers);
+        }
+    }
+#endif
+
+    // disable processing after scan, to wait for master FSM to be ready again
+    slave->scan_required = 0;
+    fsm->state = ec_fsm_slave_state_idle;
+}
+
+/*****************************************************************************/
+
+/** Check for pending configuration.
+ *
+ * \return non-zero, if configuration is started.
+ */
+int ec_fsm_slave_action_config(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    if (slave->error_flag) {
+        return 0;
+    }
+
+    // Check, if new slave state has to be acknowledged
+    if (slave->current_state & EC_SLAVE_STATE_ACK_ERR) {
+        fsm->state = ec_fsm_slave_state_acknowledge;
+        ec_fsm_change_ack(&fsm->fsm_change, slave);
+        fsm->state(fsm, datagram); // execute immediately
+        return 1;
+    }
+
+    // Does the slave have to be configured?
+    if (slave->current_state != slave->requested_state
+                || slave->force_config) {
+
+        if (slave->master->debug_level) {
+            char old_state[EC_STATE_STRING_SIZE],
+                 new_state[EC_STATE_STRING_SIZE];
+            ec_state_string(slave->current_state, old_state, 0);
+            ec_state_string(slave->requested_state, new_state, 0);
+            EC_SLAVE_DBG(slave, 1, "Changing state from %s to %s%s.\n",
+                    old_state, new_state,
+                    slave->force_config ? " (forced)" : "");
+        }
+
+        ec_lock_down(&slave->master->config_sem);
+        ++slave->master->config_busy;
+        ec_lock_up(&slave->master->config_sem);
+
+        fsm->state = ec_fsm_slave_state_config;
+#ifdef EC_QUICK_OP
+        if (!slave->force_config
+                && slave->current_state == EC_SLAVE_STATE_SAFEOP
+                && slave->requested_state == EC_SLAVE_STATE_OP
+                && slave->last_al_error == 0x001B) {
+            // last error was a sync watchdog timeout; assume a comms
+            // interruption and request a quick transition back to OP
+            ec_fsm_slave_config_quick_start(&fsm->fsm_slave_config);
+        } else
+#endif
+        {
+            ec_fsm_slave_config_start(&fsm->fsm_slave_config);
+        }
+        fsm->state(fsm, datagram); // execute immediately
+        return 1;
+    }
+    return 0;
+}
+
+/*****************************************************************************/
+
+/** Slave state: ACKNOWLEDGE.
+ */
+void ec_fsm_slave_state_acknowledge(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    if (ec_fsm_change_exec(&fsm->fsm_change, datagram)) {
+        return;
+    }
+
+    if (!ec_fsm_change_success(&fsm->fsm_change)) {
+        slave->error_flag = 1;
+        EC_SLAVE_ERR(slave, "Failed to acknowledge state change.\n");
+    }
+
+    fsm->state = ec_fsm_slave_state_ready;
+}
+
+/*****************************************************************************/
+
+/** Slave state: CONFIG.
+ */
+void ec_fsm_slave_state_config(
+        ec_fsm_slave_t *fsm, /**< Slave state machine. */
+        ec_datagram_t *datagram /**< Datagram to use. */
+        )
+{
+    ec_slave_t *slave = fsm->slave;
+
+    if (ec_fsm_slave_config_exec(&fsm->fsm_slave_config, datagram)) {
+        return;
+    }
+
+    if (!ec_fsm_slave_config_success(&fsm->fsm_slave_config)) {
+        // TODO: mark slave_config as failed.
+    }
+
+    slave->force_config = 0;
+
+    ec_lock_down(&slave->master->config_sem);
+    if (slave->master->config_busy) {
+        if (--slave->master->config_busy == 0) {
+            wake_up_interruptible(&slave->master->config_queue);
+        }
+    }
+    ec_lock_up(&slave->master->config_sem);
+
+    fsm->state = ec_fsm_slave_state_ready;
+}
+
+/*****************************************************************************/
+
 /** Check for pending SDO dictionary reads.
  *
  * \return non-zero, if an SDO dictionary read is started.
@@ -459,6 +657,16 @@ void ec_fsm_slave_state_ready(
         ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
+    // Check for pending scan requests
+    if (ec_fsm_slave_action_scan(fsm, datagram)) {
+        return;
+    }
+
+    // Check for pending configuration requests
+    if (ec_fsm_slave_action_config(fsm, datagram)) {
+        return;
+    }
+
     // Check for pending internal SDO requests
     if (ec_fsm_slave_action_process_config_sdo(fsm, datagram)) {
         return;
diff --git a/master/fsm_slave.h b/master/fsm_slave.h
--- a/master/fsm_slave.h
+++ b/master/fsm_slave.h
@@ -49,6 +49,8 @@
 #ifdef EC_EOE
 #include "fsm_eoe.h"
 #endif
+#include "fsm_slave_config.h"
+#include "fsm_slave_scan.h"
 
 /*****************************************************************************/
 
@@ -79,6 +81,10 @@ struct ec_fsm_slave {
 #ifdef EC_EOE
     ec_fsm_eoe_t fsm_eoe; /**< EoE state machine. */
 #endif
+    ec_fsm_pdo_t fsm_pdo; /**< PDO configuration state machine. */
+    ec_fsm_change_t fsm_change; /**< State change state machine */
+    ec_fsm_slave_scan_t fsm_slave_scan; /**< slave scan state machine */
+    ec_fsm_slave_config_t fsm_slave_config; /**< slave config state machine. */
 };
 
 /*****************************************************************************/
diff --git a/master/fsm_slave_config.c b/master/fsm_slave_config.c
--- a/master/fsm_slave_config.c
+++ b/master/fsm_slave_config.c
@@ -121,6 +121,7 @@ void ec_fsm_slave_config_reconfigure(ec_
  */
 void ec_fsm_slave_config_init(
         ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_slave_t *slave, /**< slave to configure */
         ec_fsm_change_t *fsm_change, /**< State change state machine to use. */
         ec_fsm_coe_t *fsm_coe, /**< CoE state machine to use. */
         ec_fsm_soe_t *fsm_soe, /**< SoE state machine to use. */
@@ -130,6 +131,7 @@ void ec_fsm_slave_config_init(
     ec_sdo_request_init(&fsm->request_copy);
     ec_soe_request_init(&fsm->soe_request_copy);
 
+    fsm->slave = slave;
     fsm->datagram = NULL;
     fsm->fsm_change = fsm_change;
     fsm->fsm_coe = fsm_coe;
@@ -154,11 +156,9 @@ void ec_fsm_slave_config_clear(
 /** Start slave configuration state machine.
  */
 void ec_fsm_slave_config_start(
-        ec_fsm_slave_config_t *fsm, /**< slave state machine */
-        ec_slave_t *slave /**< slave to configure */
+        ec_fsm_slave_config_t *fsm /**< slave state machine */
         )
 {
-    fsm->slave = slave;
     fsm->state = ec_fsm_slave_config_state_start;
 }
 
@@ -167,11 +167,9 @@ void ec_fsm_slave_config_start(
 /** Start slave configuration state machine for "quick" SAFEOP->OP
  */
 void ec_fsm_slave_config_quick_start(
-        ec_fsm_slave_config_t *fsm, /**< slave state machine */
-        ec_slave_t *slave /**< slave to configure */
+        ec_fsm_slave_config_t *fsm /**< slave state machine */
         )
 {
-    fsm->slave = slave;
     fsm->state = ec_fsm_slave_config_state_quick_start;
 }
 
@@ -1439,6 +1437,7 @@ void ec_fsm_slave_config_state_dc_cycle(
 
     EC_SLAVE_DBG(slave, 1, "Checking for synchrony.\n");
 
+    fsm->last_diff_ms = 0;
     fsm->jiffies_start = jiffies;
     ec_datagram_fprd(datagram, slave->station_address, 0x092c, 4);
     ec_datagram_zero(datagram);
@@ -1500,9 +1499,9 @@ void ec_fsm_slave_config_state_dc_sync_c
             EC_SLAVE_WARN(slave, "Slave did not sync after %lu ms.\n",
                     diff_ms);
         } else {
-            static unsigned long last_diff_ms = 0;
-            if ((diff_ms < last_diff_ms) || (diff_ms >= (last_diff_ms + 100))) {
-                last_diff_ms = diff_ms;
+            if ((diff_ms < fsm->last_diff_ms)
+                    || (diff_ms >= (fsm->last_diff_ms + 100))) {
+                fsm->last_diff_ms = diff_ms;
                 EC_SLAVE_DBG(slave, 1, "Sync after %4lu ms: %10d ns\n",
                         diff_ms, negative ? -abs_sync_diff: abs_sync_diff);
             }
diff --git a/master/fsm_slave_config.h b/master/fsm_slave_config.h
--- a/master/fsm_slave_config.h
+++ b/master/fsm_slave_config.h
@@ -66,18 +66,19 @@ struct ec_fsm_slave_config
     ec_sdo_request_t request_copy; /**< Copied SDO request. */
     ec_soe_request_t *soe_request; /**< SDO request for SDO configuration. */
     ec_soe_request_t soe_request_copy; /**< Copied SDO request. */
+    unsigned long last_diff_ms; /**< For sync reporting. */
     unsigned long jiffies_start; /**< For timeout calculations. */
     unsigned int take_time; /**< Store jiffies after datagram reception. */
 };
 
 /*****************************************************************************/
 
-void ec_fsm_slave_config_init(ec_fsm_slave_config_t *,
+void ec_fsm_slave_config_init(ec_fsm_slave_config_t *, ec_slave_t *,
         ec_fsm_change_t *, ec_fsm_coe_t *, ec_fsm_soe_t *, ec_fsm_pdo_t *);
 void ec_fsm_slave_config_clear(ec_fsm_slave_config_t *);
 
-void ec_fsm_slave_config_start(ec_fsm_slave_config_t *, ec_slave_t *);
-void ec_fsm_slave_config_quick_start(ec_fsm_slave_config_t *, ec_slave_t *);
+void ec_fsm_slave_config_start(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_quick_start(ec_fsm_slave_config_t *);
 
 int ec_fsm_slave_config_exec(ec_fsm_slave_config_t *, ec_datagram_t *);
 int ec_fsm_slave_config_success(const ec_fsm_slave_config_t *);
diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -97,11 +97,13 @@ void ec_fsm_slave_scan_enter_pdos(ec_fsm
  */
 void ec_fsm_slave_scan_init(
         ec_fsm_slave_scan_t *fsm, /**< Slave scanning state machine. */
+        ec_slave_t *slave, /**< slave to configure */
         ec_fsm_slave_config_t *fsm_slave_config, /**< Slave configuration
                                                   state machine to use. */
         ec_fsm_pdo_t *fsm_pdo /**< PDO configuration machine to use. */
         )
 {
+    fsm->slave = slave;
     fsm->datagram = NULL;
     fsm->fsm_slave_config = fsm_slave_config;
     fsm->fsm_pdo = fsm_pdo;
@@ -127,11 +129,9 @@ void ec_fsm_slave_scan_clear(ec_fsm_slav
  */
 
 void ec_fsm_slave_scan_start(
-        ec_fsm_slave_scan_t *fsm, /**< slave state machine */
-        ec_slave_t *slave /**< slave to configure */
+        ec_fsm_slave_scan_t *fsm /**< slave state machine */
         )
 {
-    fsm->slave = slave;
     fsm->state = ec_fsm_slave_scan_state_start;
 }
 
@@ -1404,7 +1404,7 @@ void ec_fsm_slave_scan_enter_preop(
 
         fsm->state = ec_fsm_slave_scan_state_preop;
         ec_slave_request_state(slave, EC_SLAVE_STATE_PREOP);
-        ec_fsm_slave_config_start(fsm->fsm_slave_config, slave);
+        ec_fsm_slave_config_start(fsm->fsm_slave_config);
         ec_fsm_slave_config_exec(fsm->fsm_slave_config, datagram);
     } else {
         EC_SLAVE_DBG(slave, 1, "Reading mailbox"
diff --git a/master/fsm_slave_scan.h b/master/fsm_slave_scan.h
--- a/master/fsm_slave_scan.h
+++ b/master/fsm_slave_scan.h
@@ -73,11 +73,11 @@ struct ec_fsm_slave_scan
 
 /*****************************************************************************/
 
-void ec_fsm_slave_scan_init(ec_fsm_slave_scan_t *,
+void ec_fsm_slave_scan_init(ec_fsm_slave_scan_t *, ec_slave_t *,
         ec_fsm_slave_config_t *, ec_fsm_pdo_t *);
 void ec_fsm_slave_scan_clear(ec_fsm_slave_scan_t *);
 
-void ec_fsm_slave_scan_start(ec_fsm_slave_scan_t *, ec_slave_t *);
+void ec_fsm_slave_scan_start(ec_fsm_slave_scan_t *);
 
 int ec_fsm_slave_scan_exec(ec_fsm_slave_scan_t *, ec_datagram_t *);
 int ec_fsm_slave_scan_success(const ec_fsm_slave_scan_t *);
diff --git a/master/ioctl.c b/master/ioctl.c
--- a/master/ioctl.c
+++ b/master/ioctl.c
@@ -312,6 +312,7 @@ static ATTRIBUTES int ec_ioctl_slave(
     data.transmission_delay = slave->transmission_delay;
     data.al_state = slave->current_state;
     data.error_flag = slave->error_flag;
+    data.scan_required = slave->scan_required;
     data.sdo_count = ec_slave_sdo_count(slave);
     data.ready = ec_fsm_slave_is_ready(&slave->fsm);
 
diff --git a/master/ioctl.h b/master/ioctl.h
--- a/master/ioctl.h
+++ b/master/ioctl.h
@@ -266,6 +266,7 @@ typedef struct {
     uint32_t transmission_delay;
     uint8_t al_state;
     uint8_t error_flag;
+    uint8_t scan_required;
     uint8_t ready;
     uint8_t sync_count;
     uint16_t sdo_count;
diff --git a/master/master.c b/master/master.c
--- a/master/master.c
+++ b/master/master.c
@@ -3099,6 +3099,8 @@ int ecrt_master_get_slave(ec_master_t *m
 
     slave_info->al_state = slave->current_state;
     slave_info->error_flag = slave->error_flag;
+    slave_info->scan_required = slave->scan_required;
+    slave_info->ready = ec_fsm_slave_is_ready(&slave->fsm);
     slave_info->sync_count = slave->sii_image->sii.sync_count;
     slave_info->sdo_count = ec_slave_sdo_count(slave);
     if (slave->sii_image->sii.name) {
diff --git a/master/slave.c b/master/slave.c
--- a/master/slave.c
+++ b/master/slave.c
@@ -131,6 +131,7 @@ void ec_slave_init(
 
     INIT_LIST_HEAD(&slave->sdo_dictionary);
 
+    slave->scan_required = 1;
     slave->sdo_dictionary_fetched = 0;
     slave->jiffies_preop = 0;
 
diff --git a/master/slave.h b/master/slave.h
--- a/master/slave.h
+++ b/master/slave.h
@@ -267,6 +267,7 @@ struct ec_slave
     ec_sii_image_t *sii_image;  /**< Current complete SII image. */
 
     struct list_head sdo_dictionary; /**< SDO dictionary list */
+    uint8_t scan_required; /**< Scan required. */
     uint8_t sdo_dictionary_fetched; /**< Dictionary has been fetched. */
     unsigned long jiffies_preop; /**< Time, the slave went to PREOP. */
 
