From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Thu, 16 Jun 2016 19:38:04 +1200

Refactor fsm_slave_config to use externally supplied datagram.

diff --git a/master/datagram.c b/master/datagram.c
--- a/master/datagram.c
+++ b/master/datagram.c
@@ -183,6 +183,27 @@ void ec_datagram_zero(ec_datagram_t *dat
 
 /*****************************************************************************/
 
+/** Copies a previously constructed datagram for repeated send.
+ * 
+ * \return Return value of ec_datagram_prealloc().
+ */
+int ec_datagram_repeat(
+        ec_datagram_t *datagram, /**< EtherCAT datagram to update. */
+        const ec_datagram_t *source /**< EtherCAT datagram to copy. */)
+{
+    int ret;
+    size_t data_size = source->data_size;
+    EC_FUNC_HEADER;
+    if (datagram != source) {
+        datagram->type = source->type;
+        memcpy(datagram->address, source->address, sizeof(datagram->address));
+        memcpy(datagram->data, source->data, data_size);
+    }
+    EC_FUNC_FOOTER;
+}
+
+/*****************************************************************************/
+
 /** Initializes an EtherCAT APRD datagram.
  *
  * \return Return value of ec_datagram_prealloc().
diff --git a/master/datagram.h b/master/datagram.h
--- a/master/datagram.h
+++ b/master/datagram.h
@@ -132,6 +132,7 @@ void ec_datagram_clear(ec_datagram_t *);
 void ec_datagram_unqueue(ec_datagram_t *);
 int ec_datagram_prealloc(ec_datagram_t *, size_t);
 void ec_datagram_zero(ec_datagram_t *);
+int ec_datagram_repeat(ec_datagram_t *, const ec_datagram_t *);
 
 int ec_datagram_aprd(ec_datagram_t *, uint16_t, uint16_t, size_t);
 int ec_datagram_apwr(ec_datagram_t *, uint16_t, uint16_t, size_t);
diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -101,7 +101,7 @@ void ec_fsm_master_init(
     ec_fsm_pdo_init(&fsm->fsm_pdo, &fsm->fsm_coe);
     ec_fsm_change_init(&fsm->fsm_change);
     ec_fsm_reboot_init(&fsm->fsm_reboot, fsm->datagram);
-    ec_fsm_slave_config_init(&fsm->fsm_slave_config, fsm->datagram,
+    ec_fsm_slave_config_init(&fsm->fsm_slave_config,
             &fsm->fsm_change, &fsm->fsm_coe, &fsm->fsm_soe, &fsm->fsm_pdo);
     ec_fsm_slave_scan_init(&fsm->fsm_slave_scan, fsm->datagram,
             &fsm->fsm_slave_config, &fsm->fsm_pdo);
@@ -1310,7 +1310,7 @@ void ec_fsm_master_state_configure_slave
 {
     ec_master_t *master = fsm->master;
 
-    if (ec_fsm_slave_config_exec(&fsm->fsm_slave_config)) {
+    if (ec_fsm_slave_config_exec(&fsm->fsm_slave_config, fsm->datagram)) {
         return;
     }
 
diff --git a/master/fsm_slave_config.c b/master/fsm_slave_config.c
--- a/master/fsm_slave_config.c
+++ b/master/fsm_slave_config.c
@@ -61,59 +61,59 @@
 
 /*****************************************************************************/
 
-void ec_fsm_slave_config_state_start(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_quick_start(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_init(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_clear_fmmus(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_clear_sync(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_dc_clear_assign(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_mbox_sync(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_start(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_quick_start(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_init(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_clear_fmmus(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_clear_sync(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_dc_clear_assign(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_mbox_sync(ec_fsm_slave_config_t *, ec_datagram_t *);
 #ifdef EC_SII_ASSIGN
-void ec_fsm_slave_config_state_assign_pdi(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_assign_pdi(ec_fsm_slave_config_t *, ec_datagram_t *);
 #endif
-void ec_fsm_slave_config_state_boot_preop(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_boot_preop(ec_fsm_slave_config_t *, ec_datagram_t *);
 #ifdef EC_SII_ASSIGN
-void ec_fsm_slave_config_state_assign_ethercat(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_assign_ethercat(ec_fsm_slave_config_t *, ec_datagram_t *);
 #endif
-void ec_fsm_slave_config_state_sdo_conf(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_soe_conf_preop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_watchdog_divider(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_watchdog(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_pdo_sync(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_pdo_conf(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_fmmu(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_dc_cycle(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_dc_sync_check(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_dc_start(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_dc_assign(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_safeop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_soe_conf_safeop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_op(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_sdo_conf(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_soe_conf_preop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_watchdog_divider(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_watchdog(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_pdo_sync(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_pdo_conf(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_fmmu(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_dc_cycle(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_dc_sync_check(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_dc_start(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_dc_assign(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_safeop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_soe_conf_safeop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_op(ec_fsm_slave_config_t *, ec_datagram_t *);
 
-void ec_fsm_slave_config_enter_init(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_clear_sync(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_dc_clear_assign(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_mbox_sync(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_enter_init(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_clear_sync(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_dc_clear_assign(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_mbox_sync(ec_fsm_slave_config_t *, ec_datagram_t *);
 #ifdef EC_SII_ASSIGN
-void ec_fsm_slave_config_enter_assign_pdi(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_enter_assign_pdi(ec_fsm_slave_config_t *, ec_datagram_t *);
 #endif
-void ec_fsm_slave_config_enter_boot_preop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_sdo_conf(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_soe_conf_preop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_pdo_conf(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_watchdog_divider(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_watchdog(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_pdo_sync(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_fmmu(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_dc_cycle(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_safeop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_soe_conf_safeop(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_enter_op(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_enter_boot_preop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_sdo_conf(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_soe_conf_preop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_pdo_conf(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_watchdog_divider(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_watchdog(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_pdo_sync(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_fmmu(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_dc_cycle(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_safeop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_soe_conf_safeop(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_enter_op(ec_fsm_slave_config_t *, ec_datagram_t *);
 
-void ec_fsm_slave_config_state_end(ec_fsm_slave_config_t *);
-void ec_fsm_slave_config_state_error(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_state_end(ec_fsm_slave_config_t *, ec_datagram_t *);
+void ec_fsm_slave_config_state_error(ec_fsm_slave_config_t *, ec_datagram_t *);
 
-void ec_fsm_slave_config_reconfigure(ec_fsm_slave_config_t *);
+void ec_fsm_slave_config_reconfigure(ec_fsm_slave_config_t *, ec_datagram_t *);
 
 /*****************************************************************************/
 
@@ -121,7 +121,6 @@ void ec_fsm_slave_config_reconfigure(ec_
  */
 void ec_fsm_slave_config_init(
         ec_fsm_slave_config_t *fsm, /**< slave state machine */
-        ec_datagram_t *datagram, /**< datagram structure to use */
         ec_fsm_change_t *fsm_change, /**< State change state machine to use. */
         ec_fsm_coe_t *fsm_coe, /**< CoE state machine to use. */
         ec_fsm_soe_t *fsm_soe, /**< SoE state machine to use. */
@@ -131,7 +130,7 @@ void ec_fsm_slave_config_init(
     ec_sdo_request_init(&fsm->request_copy);
     ec_soe_request_init(&fsm->soe_request_copy);
 
-    fsm->datagram = datagram;
+    fsm->datagram = NULL;
     fsm->fsm_change = fsm_change;
     fsm->fsm_coe = fsm_coe;
     fsm->fsm_soe = fsm_soe;
@@ -199,17 +198,31 @@ int ec_fsm_slave_config_running(
  * \return false, if state machine has terminated
  */
 int ec_fsm_slave_config_exec(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    if (fsm->datagram->state == EC_DATAGRAM_SENT
-        || fsm->datagram->state == EC_DATAGRAM_QUEUED) {
-        // datagram was not sent or received yet.
-        return ec_fsm_slave_config_running(fsm);
+    if (!ec_fsm_slave_config_running(fsm))
+        return 0;
+    if (fsm->datagram &&
+            (fsm->datagram->state == EC_DATAGRAM_INIT ||
+             fsm->datagram->state == EC_DATAGRAM_QUEUED ||
+             fsm->datagram->state == EC_DATAGRAM_SENT)) {
+        // datagram not received yet
+        if (datagram != fsm->datagram)
+            datagram->state = EC_DATAGRAM_INVALID;
+        return 1;
     }
 
-    fsm->state(fsm);
-    return ec_fsm_slave_config_running(fsm);
+    fsm->state(fsm, datagram);
+
+    if (!ec_fsm_slave_config_running(fsm)) {
+        fsm->datagram = NULL;
+        return 0;
+    }
+
+    fsm->datagram = datagram;
+    return 1;
 }
 
 /*****************************************************************************/
@@ -231,11 +244,12 @@ int ec_fsm_slave_config_success(
 /** Slave configuration state: START.
  */
 void ec_fsm_slave_config_state_start(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     EC_SLAVE_DBG(fsm->slave, 1, "Configuring...\n");
-    ec_fsm_slave_config_enter_init(fsm);
+    ec_fsm_slave_config_enter_init(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -243,11 +257,12 @@ void ec_fsm_slave_config_state_start(
 /** Slave configuration state: QUICK START.
  */
 void ec_fsm_slave_config_state_quick_start(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     EC_SLAVE_DBG(fsm->slave, 1, "Configuring (quick)...\n");
-    ec_fsm_slave_config_enter_soe_conf_safeop(fsm);
+    ec_fsm_slave_config_enter_soe_conf_safeop(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -255,11 +270,12 @@ void ec_fsm_slave_config_state_quick_sta
 /** Start state change to INIT.
  */
 void ec_fsm_slave_config_enter_init(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_fsm_change_start(fsm->fsm_change, fsm->slave, EC_SLAVE_STATE_INIT);
-    ec_fsm_change_exec(fsm->fsm_change, fsm->datagram);
+    ec_fsm_change_exec(fsm->fsm_change, datagram);
     fsm->state = ec_fsm_slave_config_state_init;
 }
 
@@ -268,13 +284,13 @@ void ec_fsm_slave_config_enter_init(
 /** Slave configuration state: INIT.
  */
 void ec_fsm_slave_config_state_init(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
 
-    if (ec_fsm_change_exec(fsm->fsm_change, fsm->datagram)) return;
+    if (ec_fsm_change_exec(fsm->fsm_change, datagram)) return;
 
     if (!ec_fsm_change_success(fsm->fsm_change)) {
         if (!fsm->fsm_change->spontaneous_change)
@@ -286,7 +302,7 @@ void ec_fsm_slave_config_state_init(
     EC_SLAVE_DBG(slave, 1, "Now in INIT.\n");
 
     if (!slave->base_fmmu_count) { // skip FMMU configuration
-        ec_fsm_slave_config_enter_clear_sync(fsm);
+        ec_fsm_slave_config_enter_clear_sync(fsm, datagram);
         return;
     }
 
@@ -309,29 +325,30 @@ void ec_fsm_slave_config_state_init(
 /** Slave configuration state: CLEAR FMMU.
  */
 void ec_fsm_slave_config_state_clear_fmmus(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
+        return;
+    }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(fsm->slave, "Failed receive FMMU clearing datagram.\n");
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         fsm->slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(fsm->slave, "Failed to clear FMMUs: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    ec_fsm_slave_config_enter_clear_sync(fsm);
+    ec_fsm_slave_config_enter_clear_sync(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -339,16 +356,16 @@ void ec_fsm_slave_config_state_clear_fmm
 /** Clear the sync manager configurations.
  */
 void ec_fsm_slave_config_enter_clear_sync(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
     size_t sync_size;
 
     if (!slave->base_sync_count) {
         // no sync managers
-        ec_fsm_slave_config_enter_dc_clear_assign(fsm);
+        ec_fsm_slave_config_enter_dc_clear_assign(fsm, datagram);
         return;
     }
 
@@ -368,31 +385,32 @@ void ec_fsm_slave_config_enter_clear_syn
 /** Slave configuration state: CLEAR SYNC.
  */
 void ec_fsm_slave_config_state_clear_sync(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
+        return;
+    }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(fsm->slave, "Failed receive sync manager"
                 " clearing datagram.\n");
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         fsm->slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(fsm->slave,
                 "Failed to clear sync manager configurations: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    ec_fsm_slave_config_enter_dc_clear_assign(fsm);
+    ec_fsm_slave_config_enter_dc_clear_assign(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -400,14 +418,14 @@ void ec_fsm_slave_config_state_clear_syn
 /** Clear the DC assignment.
  */
 void ec_fsm_slave_config_enter_dc_clear_assign(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
 
     if (!slave->base_dc_supported || !slave->has_dc_system_time) {
-        ec_fsm_slave_config_enter_mbox_sync(fsm);
+        ec_fsm_slave_config_enter_mbox_sync(fsm, datagram);
         return;
     }
 
@@ -424,28 +442,29 @@ void ec_fsm_slave_config_enter_dc_clear_
 /** Slave configuration state: CLEAR DC ASSIGN.
  */
 void ec_fsm_slave_config_state_dc_clear_assign(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
+        return;
+    }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(fsm->slave, "Failed receive DC assignment"
                 " clearing datagram.\n");
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         // clearing the DC assignment does not succeed on simple slaves
         EC_SLAVE_DBG(fsm->slave, 1, "Failed to clear DC assignment: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
     }
 
-    ec_fsm_slave_config_enter_mbox_sync(fsm);
+    ec_fsm_slave_config_enter_mbox_sync(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -453,15 +472,15 @@ void ec_fsm_slave_config_state_dc_clear_
 /** Check for mailbox sync managers to be configured.
  */
 void ec_fsm_slave_config_enter_mbox_sync(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
     unsigned int i;
 
     // slave is now in INIT
-    if (slave->current_state == slave->requested_state) {
+    if (fsm->slave->current_state == slave->requested_state) {
         fsm->state = ec_fsm_slave_config_state_end; // successful
         EC_SLAVE_DBG(slave, 1, "Finished configuration.\n");
         return;
@@ -479,9 +498,9 @@ void ec_fsm_slave_config_enter_mbox_sync
         EC_SLAVE_DBG(slave, 1, "Slave does not support"
                 " mailbox communication.\n");
 #ifdef EC_SII_ASSIGN
-        ec_fsm_slave_config_enter_assign_pdi(fsm);
+        ec_fsm_slave_config_enter_assign_pdi(fsm, datagram);
 #else
-        ec_fsm_slave_config_enter_boot_preop(fsm);
+        ec_fsm_slave_config_enter_boot_preop(fsm, datagram);
 #endif
         return;
     }
@@ -600,26 +619,28 @@ void ec_fsm_slave_config_enter_mbox_sync
  * \todo Timeout for response.
  */
 void ec_fsm_slave_config_state_mbox_sync(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
+    }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive sync manager"
                 " configuration datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
     if (fsm->take_time) {
         fsm->take_time = 0;
-        fsm->jiffies_start = datagram->jiffies_sent;
+        fsm->jiffies_start = fsm->datagram->jiffies_sent;
     }
 
     /* Because the sync manager configurations are cleared during the last
@@ -627,8 +648,8 @@ void ec_fsm_slave_config_state_mbox_sync
      * manager configuration datagram. Therefore, resend the datagram for
      * a certain time, if the slave does not respond.
      */
-    if (datagram->working_counter == 0) {
-        unsigned long diff = datagram->jiffies_received - fsm->jiffies_start;
+    if (fsm->datagram->working_counter == 0) {
+        unsigned long diff = fsm->datagram->jiffies_received - fsm->jiffies_start;
 
         if (diff >= HZ) {
             slave->error_flag = 1;
@@ -642,21 +663,22 @@ void ec_fsm_slave_config_state_mbox_sync
         }
 
         // send configuration datagram again
+        ec_datagram_repeat(datagram, fsm->datagram);
         fsm->retries = EC_FSM_RETRIES;
         return;
     }
-    else if (datagram->working_counter != 1) {
+    else if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to set sync managers: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
 #ifdef EC_SII_ASSIGN
-    ec_fsm_slave_config_enter_assign_pdi(fsm);
+    ec_fsm_slave_config_enter_assign_pdi(fsm, datagram);
 #else
-    ec_fsm_slave_config_enter_boot_preop(fsm);
+    ec_fsm_slave_config_enter_boot_preop(fsm, datagram);
 #endif
 }
 
@@ -667,10 +689,10 @@ void ec_fsm_slave_config_state_mbox_sync
 /** Assign SII to PDI.
  */
 void ec_fsm_slave_config_enter_assign_pdi(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
     if (fsm->slave->requested_state != EC_SLAVE_STATE_BOOT) {
@@ -682,7 +704,7 @@ void ec_fsm_slave_config_enter_assign_pd
         fsm->state = ec_fsm_slave_config_state_assign_pdi;
     }
     else {
-        ec_fsm_slave_config_enter_boot_preop(fsm);
+        ec_fsm_slave_config_enter_boot_preop(fsm, datagram);
     }
 }
 
@@ -691,29 +713,30 @@ void ec_fsm_slave_config_enter_assign_pd
 /** Slave configuration state: ASSIGN_PDI.
  */
 void ec_fsm_slave_config_state_assign_pdi(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         EC_SLAVE_WARN(slave, "Failed receive SII assignment datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         goto cont_preop;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         EC_SLAVE_WARN(slave, "Failed to assign SII to PDI: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
     }
 
 cont_preop:
-    ec_fsm_slave_config_enter_boot_preop(fsm);
+    ec_fsm_slave_config_enter_boot_preop(fsm, datagram);
 }
 
 #endif
@@ -723,7 +746,8 @@ cont_preop:
 /** Request PREOP state.
  */
 void ec_fsm_slave_config_enter_boot_preop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     fsm->state = ec_fsm_slave_config_state_boot_preop;
@@ -736,7 +760,7 @@ void ec_fsm_slave_config_enter_boot_preo
                 fsm->slave, EC_SLAVE_STATE_BOOT);
     }
 
-    ec_fsm_change_exec(fsm->fsm_change, fsm->datagram); // execute immediately
+    ec_fsm_change_exec(fsm->fsm_change, datagram); // execute immediately
 }
 
 /*****************************************************************************/
@@ -744,12 +768,13 @@ void ec_fsm_slave_config_enter_boot_preo
 /** Slave configuration state: BOOT/PREOP.
  */
 void ec_fsm_slave_config_state_boot_preop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_change_exec(fsm->fsm_change, fsm->datagram)) {
+    if (ec_fsm_change_exec(fsm->fsm_change, datagram)) {
         return;
     }
 
@@ -769,8 +794,8 @@ void ec_fsm_slave_config_state_boot_preo
 #ifdef EC_SII_ASSIGN
     EC_SLAVE_DBG(slave, 1, "Assigning SII access back to EtherCAT.\n");
 
-    ec_datagram_fpwr(fsm->datagram, slave->station_address, 0x0500, 0x01);
-    EC_WRITE_U8(fsm->datagram->data, 0x00); // EtherCAT
+    ec_datagram_fpwr(datagram, slave->station_address, 0x0500, 0x01);
+    EC_WRITE_U8(datagram->data, 0x00); // EtherCAT
     fsm->retries = EC_FSM_RETRIES;
     fsm->state = ec_fsm_slave_config_state_assign_ethercat;
 #else
@@ -780,7 +805,7 @@ void ec_fsm_slave_config_state_boot_preo
         return;
     }
 
-    ec_fsm_slave_config_enter_sdo_conf(fsm);
+    ec_fsm_slave_config_enter_sdo_conf(fsm, datagram);
 #endif
 }
 
@@ -791,25 +816,26 @@ void ec_fsm_slave_config_state_boot_preo
 /** Slave configuration state: ASSIGN_ETHERCAT.
  */
 void ec_fsm_slave_config_state_assign_ethercat(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         EC_SLAVE_WARN(slave, "Failed receive SII assignment datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         goto cont_sdo_conf;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         EC_SLAVE_WARN(slave, "Failed to assign SII back to EtherCAT: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
     }
 
 cont_sdo_conf:
@@ -819,7 +845,7 @@ cont_sdo_conf:
         return;
     }
 
-    ec_fsm_slave_config_enter_sdo_conf(fsm);
+    ec_fsm_slave_config_enter_sdo_conf(fsm, datagram);
 }
 
 #endif
@@ -829,19 +855,20 @@ cont_sdo_conf:
 /** Check for SDO configurations to be applied.
  */
 void ec_fsm_slave_config_enter_sdo_conf(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
 
     if (!slave->config) {
-        ec_fsm_slave_config_enter_pdo_sync(fsm);
+        ec_fsm_slave_config_enter_pdo_sync(fsm, datagram);
         return;
     }
 
     // No CoE configuration to be applied?
     if (list_empty(&slave->config->sdo_configs)) { // skip SDO configuration
-        ec_fsm_slave_config_enter_soe_conf_preop(fsm);
+        ec_fsm_slave_config_enter_soe_conf_preop(fsm, datagram);
         return;
     }
 
@@ -852,7 +879,7 @@ void ec_fsm_slave_config_enter_sdo_conf(
     ec_sdo_request_copy(&fsm->request_copy, fsm->request);
     ecrt_sdo_request_write(&fsm->request_copy);
     ec_fsm_coe_transfer(fsm->fsm_coe, fsm->slave, &fsm->request_copy);
-    ec_fsm_coe_exec(fsm->fsm_coe, fsm->datagram); // execute immediately
+    ec_fsm_coe_exec(fsm->fsm_coe, datagram); // execute immediately
 }
 
 /*****************************************************************************/
@@ -860,10 +887,11 @@ void ec_fsm_slave_config_enter_sdo_conf(
 /** Slave configuration state: SDO_CONF.
  */
 void ec_fsm_slave_config_state_sdo_conf(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    if (ec_fsm_coe_exec(fsm->fsm_coe, fsm->datagram)) {
+    if (ec_fsm_coe_exec(fsm->fsm_coe, datagram)) {
         return;
     }
 
@@ -875,7 +903,7 @@ void ec_fsm_slave_config_state_sdo_conf(
     }
 
     if (!fsm->slave->config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
         return;
     }
 
@@ -886,12 +914,12 @@ void ec_fsm_slave_config_state_sdo_conf(
         ec_sdo_request_copy(&fsm->request_copy, fsm->request);
         ecrt_sdo_request_write(&fsm->request_copy);
         ec_fsm_coe_transfer(fsm->fsm_coe, fsm->slave, &fsm->request_copy);
-        ec_fsm_coe_exec(fsm->fsm_coe, fsm->datagram); // execute immediately
+        ec_fsm_coe_exec(fsm->fsm_coe, datagram); // execute immediately
         return;
     }
 
     // All SDOs are now configured.
-    ec_fsm_slave_config_enter_soe_conf_preop(fsm);
+    ec_fsm_slave_config_enter_soe_conf_preop(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -899,14 +927,15 @@ void ec_fsm_slave_config_state_sdo_conf(
 /** Check for SoE configurations to be applied.
  */
 void ec_fsm_slave_config_enter_soe_conf_preop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
     ec_soe_request_t *req;
 
     if (!slave->config) {
-        ec_fsm_slave_config_enter_pdo_sync(fsm);
+        ec_fsm_slave_config_enter_pdo_sync(fsm, datagram);
         return;
     }
 
@@ -919,13 +948,13 @@ void ec_fsm_slave_config_enter_soe_conf_
             ec_soe_request_write(&fsm->soe_request_copy);
             ec_fsm_soe_transfer(fsm->fsm_soe, fsm->slave,
                     &fsm->soe_request_copy);
-            ec_fsm_soe_exec(fsm->fsm_soe, fsm->datagram);
+            ec_fsm_soe_exec(fsm->fsm_soe, datagram);
             return;
         }
     }
 
     // No SoE configuration to be applied in PREOP
-    ec_fsm_slave_config_enter_pdo_conf(fsm);
+    ec_fsm_slave_config_enter_pdo_conf(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -933,12 +962,13 @@ void ec_fsm_slave_config_enter_soe_conf_
 /** Slave configuration state: SOE_CONF.
  */
 void ec_fsm_slave_config_state_soe_conf_preop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_soe_exec(fsm->fsm_soe, fsm->datagram)) {
+    if (ec_fsm_soe_exec(fsm->fsm_soe, datagram)) {
         return;
     }
 
@@ -950,7 +980,7 @@ void ec_fsm_slave_config_state_soe_conf_
     }
 
     if (!fsm->slave->config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
         return;
     }
 
@@ -963,13 +993,13 @@ void ec_fsm_slave_config_state_soe_conf_
             ec_soe_request_write(&fsm->soe_request_copy);
             ec_fsm_soe_transfer(fsm->fsm_soe, fsm->slave,
                     &fsm->soe_request_copy);
-            ec_fsm_soe_exec(fsm->fsm_soe, fsm->datagram);
+            ec_fsm_soe_exec(fsm->fsm_soe, datagram);
             return;
         }
     }
 
     // All PREOP IDNs are now configured.
-    ec_fsm_slave_config_enter_pdo_conf(fsm);
+    ec_fsm_slave_config_enter_pdo_conf(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -977,13 +1007,14 @@ void ec_fsm_slave_config_state_soe_conf_
 /** PDO_CONF entry function.
  */
 void ec_fsm_slave_config_enter_pdo_conf(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     // Start configuring PDOs
     ec_fsm_pdo_start_configuration(fsm->fsm_pdo, fsm->slave);
     fsm->state = ec_fsm_slave_config_state_pdo_conf;
-    fsm->state(fsm); // execute immediately
+    fsm->state(fsm, datagram); // execute immediately
 }
 
 /*****************************************************************************/
@@ -991,17 +1022,18 @@ void ec_fsm_slave_config_enter_pdo_conf(
 /** Slave configuration state: PDO_CONF.
  */
 void ec_fsm_slave_config_state_pdo_conf(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     // TODO check for config here
 
-    if (ec_fsm_pdo_exec(fsm->fsm_pdo, fsm->datagram)) {
+    if (ec_fsm_pdo_exec(fsm->fsm_pdo, datagram)) {
         return;
     }
 
     if (!fsm->slave->config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
         return;
     }
 
@@ -1009,7 +1041,7 @@ void ec_fsm_slave_config_state_pdo_conf(
         EC_SLAVE_WARN(fsm->slave, "PDO configuration failed.\n");
     }
 
-    ec_fsm_slave_config_enter_watchdog_divider(fsm);
+    ec_fsm_slave_config_enter_watchdog_divider(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1017,11 +1049,11 @@ void ec_fsm_slave_config_state_pdo_conf(
 /** WATCHDOG_DIVIDER entry function.
  */
 void ec_fsm_slave_config_enter_watchdog_divider(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_config_t *config = slave->config;
 
     if (config && config->watchdog_divider) {
@@ -1033,7 +1065,7 @@ void ec_fsm_slave_config_enter_watchdog_
         fsm->retries = EC_FSM_RETRIES;
         fsm->state = ec_fsm_slave_config_state_watchdog_divider;
     } else {
-        ec_fsm_slave_config_enter_watchdog(fsm);
+        ec_fsm_slave_config_enter_watchdog(fsm, datagram);
     }
 }
 
@@ -1042,31 +1074,33 @@ void ec_fsm_slave_config_enter_watchdog_
 /** Slave configuration state: WATCHDOG_DIVIDER.
  */
 void ec_fsm_slave_config_state_watchdog_divider(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
+    }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive watchdog divider"
                 " configuration datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         EC_SLAVE_WARN(slave, "Failed to set watchdog divider: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    ec_fsm_slave_config_enter_watchdog(fsm);
+    ec_fsm_slave_config_enter_watchdog(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1074,10 +1108,10 @@ void ec_fsm_slave_config_state_watchdog_
 /** WATCHDOG entry function
  */
 void ec_fsm_slave_config_enter_watchdog(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
     ec_slave_config_t *config = slave->config;
 
@@ -1091,7 +1125,7 @@ void ec_fsm_slave_config_enter_watchdog(
         fsm->retries = EC_FSM_RETRIES;
         fsm->state = ec_fsm_slave_config_state_watchdog;
     } else {
-        ec_fsm_slave_config_enter_pdo_sync(fsm);
+        ec_fsm_slave_config_enter_pdo_sync(fsm, datagram);
     }
 }
 
@@ -1101,30 +1135,32 @@ void ec_fsm_slave_config_enter_watchdog(
  */
 
 void ec_fsm_slave_config_state_watchdog(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
+    }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive sync manager"
                 " watchdog configuration datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         EC_SLAVE_WARN(slave, "Failed to set process data"
                 " watchdog intervals: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
     }
 
-    ec_fsm_slave_config_enter_pdo_sync(fsm);
+    ec_fsm_slave_config_enter_pdo_sync(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1132,11 +1168,11 @@ void ec_fsm_slave_config_state_watchdog(
 /** Check for PDO sync managers to be configured.
  */
 void ec_fsm_slave_config_enter_pdo_sync(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
     unsigned int i, j, offset, num_pdo_syncs;
     uint8_t sync_index;
     const ec_sync_t *sync;
@@ -1157,7 +1193,7 @@ void ec_fsm_slave_config_enter_pdo_sync(
 
     if (slave->sii_image->sii.sync_count <= offset) {
         // no PDO sync managers to configure
-        ec_fsm_slave_config_enter_fmmu(fsm);
+        ec_fsm_slave_config_enter_fmmu(fsm, datagram);
         return;
     }
 
@@ -1207,32 +1243,34 @@ void ec_fsm_slave_config_enter_pdo_sync(
 /** Configure PDO sync managers.
  */
 void ec_fsm_slave_config_state_pdo_sync(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
+    }
 
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive process data sync"
                 " manager configuration datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to set process data sync managers: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    ec_fsm_slave_config_enter_fmmu(fsm);
+    ec_fsm_slave_config_enter_fmmu(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1240,17 +1278,17 @@ void ec_fsm_slave_config_state_pdo_sync(
 /** Check for FMMUs to be configured.
  */
 void ec_fsm_slave_config_enter_fmmu(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    ec_datagram_t *datagram = fsm->datagram;
     unsigned int i;
     const ec_fmmu_config_t *fmmu;
     const ec_sync_t *sync;
 
     if (!slave->config) {
-        ec_fsm_slave_config_enter_safeop(fsm);
+        ec_fsm_slave_config_enter_safeop(fsm, datagram);
         return;
     }
 
@@ -1264,7 +1302,7 @@ void ec_fsm_slave_config_enter_fmmu(
     }
 
     if (!slave->base_fmmu_count) { // skip FMMU configuration
-        ec_fsm_slave_config_enter_dc_cycle(fsm);
+        ec_fsm_slave_config_enter_dc_cycle(fsm, datagram);
         return;
     }
 
@@ -1294,31 +1332,33 @@ void ec_fsm_slave_config_enter_fmmu(
 /** Slave configuration state: FMMU.
  */
 void ec_fsm_slave_config_state_fmmu(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
-        fsm->state = ec_fsm_slave_config_state_error;
-        EC_SLAVE_ERR(slave, "Failed to receive FMMUs datagram: ");
-        ec_datagram_print_state(datagram);
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
+        fsm->state = ec_fsm_slave_config_state_error;
+        EC_SLAVE_ERR(slave, "Failed to receive FMMUs datagram: ");
+        ec_datagram_print_state(fsm->datagram);
+        return;
+    }
+
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to set FMMUs: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    ec_fsm_slave_config_enter_dc_cycle(fsm);
+    ec_fsm_slave_config_enter_dc_cycle(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1326,15 +1366,15 @@ void ec_fsm_slave_config_state_fmmu(
 /** Check for DC to be configured.
  */
 void ec_fsm_slave_config_enter_dc_cycle(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
     ec_slave_config_t *config = slave->config;
 
     if (!config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
         return;
     }
 
@@ -1356,7 +1396,7 @@ void ec_fsm_slave_config_enter_dc_cycle(
         fsm->state = ec_fsm_slave_config_state_dc_cycle;
     } else {
         // DC are unused
-        ec_fsm_slave_config_enter_safeop(fsm);
+        ec_fsm_slave_config_enter_safeop(fsm, datagram);
     }
 }
 
@@ -1365,33 +1405,35 @@ void ec_fsm_slave_config_enter_dc_cycle(
 /** Slave configuration state: DC CYCLE.
  */
 void ec_fsm_slave_config_state_dc_cycle(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
     ec_slave_config_t *config = slave->config;
 
     if (!config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
+        return;
+    }
+
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive DC cycle times datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to set DC cycle times: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
@@ -1409,10 +1451,10 @@ void ec_fsm_slave_config_state_dc_cycle(
 /** Slave configuration state: DC SYNC CHECK.
  */
 void ec_fsm_slave_config_state_dc_sync_check(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
     ec_master_t *master = slave->master;
     ec_slave_config_t *config = slave->config;
@@ -1424,31 +1466,33 @@ void ec_fsm_slave_config_state_dc_sync_c
     u64 start_time;
 
     if (!config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
+        return;
+    }
+
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive DC sync check datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to check DC synchrony: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    abs_sync_diff = EC_READ_U32(datagram->data) & 0x7fffffff;
-    negative = (EC_READ_U32(datagram->data) & 0x80000000) != 0;
-    diff_ms = (datagram->jiffies_received - fsm->jiffies_start) * 1000 / HZ;
+    abs_sync_diff = EC_READ_U32(fsm->datagram->data) & 0x7fffffff;
+    negative = (EC_READ_U32(fsm->datagram->data) & 0x80000000) != 0;
+    diff_ms = (fsm->datagram->jiffies_received - fsm->jiffies_start) * 1000 / HZ;
 
     if (abs_sync_diff > EC_DC_MAX_SYNC_DIFF_NS) {
 
@@ -1517,33 +1561,35 @@ void ec_fsm_slave_config_state_dc_sync_c
 /** Slave configuration state: DC START.
  */
 void ec_fsm_slave_config_state_dc_start(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
     ec_slave_config_t *config = slave->config;
 
     if (!config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
+        return;
+    }
+
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to receive DC start time datagram: ");
-        ec_datagram_print_state(datagram);
+        ec_datagram_print_state(fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to set DC start time: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
@@ -1562,31 +1608,33 @@ void ec_fsm_slave_config_state_dc_start(
 /** Slave configuration state: DC ASSIGN.
  */
 void ec_fsm_slave_config_state_dc_assign(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
-    ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
 
-    if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
-        return;
-
-    if (datagram->state != EC_DATAGRAM_RECEIVED) {
-        fsm->state = ec_fsm_slave_config_state_error;
-        EC_SLAVE_ERR(slave, "Failed to receive DC activation datagram: ");
-        ec_datagram_print_state(datagram);
+    if (fsm->datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--) {
+        ec_datagram_repeat(datagram, fsm->datagram);
         return;
     }
 
-    if (datagram->working_counter != 1) {
+    if (fsm->datagram->state != EC_DATAGRAM_RECEIVED) {
+        fsm->state = ec_fsm_slave_config_state_error;
+        EC_SLAVE_ERR(slave, "Failed to receive DC activation datagram: ");
+        ec_datagram_print_state(fsm->datagram);
+        return;
+    }
+
+    if (fsm->datagram->working_counter != 1) {
         slave->error_flag = 1;
         fsm->state = ec_fsm_slave_config_state_error;
         EC_SLAVE_ERR(slave, "Failed to activate DC: ");
-        ec_datagram_print_wc_error(datagram);
+        ec_datagram_print_wc_error(fsm->datagram);
         return;
     }
 
-    ec_fsm_slave_config_enter_safeop(fsm);
+    ec_fsm_slave_config_enter_safeop(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1594,12 +1642,13 @@ void ec_fsm_slave_config_state_dc_assign
 /** Request SAFEOP state.
  */
 void ec_fsm_slave_config_enter_safeop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     fsm->state = ec_fsm_slave_config_state_safeop;
     ec_fsm_change_start(fsm->fsm_change, fsm->slave, EC_SLAVE_STATE_SAFEOP);
-    ec_fsm_change_exec(fsm->fsm_change, fsm->datagram); // execute immediately
+    ec_fsm_change_exec(fsm->fsm_change, datagram); // execute immediately
 }
 
 /*****************************************************************************/
@@ -1607,12 +1656,13 @@ void ec_fsm_slave_config_enter_safeop(
 /** Slave configuration state: SAFEOP.
  */
 void ec_fsm_slave_config_state_safeop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_change_exec(fsm->fsm_change, fsm->datagram)) return;
+    if (ec_fsm_change_exec(fsm->fsm_change, datagram)) return;
 
     if (!ec_fsm_change_success(fsm->fsm_change)) {
         if (!fsm->fsm_change->spontaneous_change)
@@ -1631,7 +1681,7 @@ void ec_fsm_slave_config_state_safeop(
         return;
     }
 
-    ec_fsm_slave_config_enter_soe_conf_safeop(fsm);
+    ec_fsm_slave_config_enter_soe_conf_safeop(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1639,14 +1689,15 @@ void ec_fsm_slave_config_state_safeop(
 /** Check for SoE configurations to be applied in SAFEOP.
  */
 void ec_fsm_slave_config_enter_soe_conf_safeop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
     ec_soe_request_t *req;
 
     if (!slave->config) {
-        ec_fsm_slave_config_enter_op(fsm);
+        ec_fsm_slave_config_enter_op(fsm, datagram);
         return;
     }
 
@@ -1659,13 +1710,13 @@ void ec_fsm_slave_config_enter_soe_conf_
             ec_soe_request_write(&fsm->soe_request_copy);
             ec_fsm_soe_transfer(fsm->fsm_soe, fsm->slave,
                     &fsm->soe_request_copy);
-            ec_fsm_soe_exec(fsm->fsm_soe, fsm->datagram);
+            ec_fsm_soe_exec(fsm->fsm_soe, datagram);
             return;
         }
     }
 
     // No SoE configuration to be applied in SAFEOP
-    ec_fsm_slave_config_enter_op(fsm);
+    ec_fsm_slave_config_enter_op(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1673,12 +1724,13 @@ void ec_fsm_slave_config_enter_soe_conf_
 /** Slave configuration state: SOE_CONF.
  */
 void ec_fsm_slave_config_state_soe_conf_safeop(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_soe_exec(fsm->fsm_soe, fsm->datagram)) {
+    if (ec_fsm_soe_exec(fsm->fsm_soe, datagram)) {
         return;
     }
 
@@ -1690,7 +1742,7 @@ void ec_fsm_slave_config_state_soe_conf_
     }
 
     if (!fsm->slave->config) { // config removed in the meantime
-        ec_fsm_slave_config_reconfigure(fsm);
+        ec_fsm_slave_config_reconfigure(fsm, datagram);
         return;
     }
 
@@ -1703,13 +1755,13 @@ void ec_fsm_slave_config_state_soe_conf_
             ec_soe_request_write(&fsm->soe_request_copy);
             ec_fsm_soe_transfer(fsm->fsm_soe, fsm->slave,
                     &fsm->soe_request_copy);
-            ec_fsm_soe_exec(fsm->fsm_soe, fsm->datagram);
+            ec_fsm_soe_exec(fsm->fsm_soe, datagram);
             return;
         }
     }
 
     // All SAFEOP IDNs are now configured.
-    ec_fsm_slave_config_enter_op(fsm);
+    ec_fsm_slave_config_enter_op(fsm, datagram);
 }
 
 /*****************************************************************************/
@@ -1717,13 +1769,14 @@ void ec_fsm_slave_config_state_soe_conf_
 /** Bring slave to OP.
  */
 void ec_fsm_slave_config_enter_op(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     // set state to OP
     fsm->state = ec_fsm_slave_config_state_op;
     ec_fsm_change_start(fsm->fsm_change, fsm->slave, EC_SLAVE_STATE_OP);
-    ec_fsm_change_exec(fsm->fsm_change, fsm->datagram); // execute immediately
+    ec_fsm_change_exec(fsm->fsm_change, datagram); // execute immediately
 }
 
 /*****************************************************************************/
@@ -1731,12 +1784,13 @@ void ec_fsm_slave_config_enter_op(
 /** Slave configuration state: OP
  */
 void ec_fsm_slave_config_state_op(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     ec_slave_t *slave = fsm->slave;
 
-    if (ec_fsm_change_exec(fsm->fsm_change, fsm->datagram)) return;
+    if (ec_fsm_change_exec(fsm->fsm_change, datagram)) return;
 
     if (!ec_fsm_change_success(fsm->fsm_change)) {
         if (!fsm->fsm_change->spontaneous_change)
@@ -1757,13 +1811,14 @@ void ec_fsm_slave_config_state_op(
 /** Reconfigure the slave starting at INIT.
  */
 void ec_fsm_slave_config_reconfigure(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
     EC_SLAVE_DBG(fsm->slave, 1, "Slave configuration detached during "
             "configuration. Reconfiguring.");
 
-    ec_fsm_slave_config_enter_init(fsm); // reconfigure
+    ec_fsm_slave_config_enter_init(fsm, datagram); // reconfigure
 }
 
 /******************************************************************************
@@ -1773,7 +1828,8 @@ void ec_fsm_slave_config_reconfigure(
 /** State: ERROR.
  */
 void ec_fsm_slave_config_state_error(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
 }
@@ -1783,7 +1839,8 @@ void ec_fsm_slave_config_state_error(
 /** State: END.
  */
 void ec_fsm_slave_config_state_end(
-        ec_fsm_slave_config_t *fsm /**< slave state machine */
+        ec_fsm_slave_config_t *fsm, /**< slave state machine */
+        ec_datagram_t *datagram /**< Datagram to use. */
         )
 {
 }
diff --git a/master/fsm_slave_config.h b/master/fsm_slave_config.h
--- a/master/fsm_slave_config.h
+++ b/master/fsm_slave_config.h
@@ -60,7 +60,7 @@ struct ec_fsm_slave_config
     ec_fsm_pdo_t *fsm_pdo; /**< PDO configuration state machine. */
 
     ec_slave_t *slave; /**< Slave the FSM runs on. */
-    void (*state)(ec_fsm_slave_config_t *); /**< State function. */
+    void (*state)(ec_fsm_slave_config_t *, ec_datagram_t *); /**< State function. */
     unsigned int retries; /**< Retries on datagram timeout. */
     ec_sdo_request_t *request; /**< SDO request for SDO configuration. */
     ec_sdo_request_t request_copy; /**< Copied SDO request. */
@@ -72,14 +72,14 @@ struct ec_fsm_slave_config
 
 /*****************************************************************************/
 
-void ec_fsm_slave_config_init(ec_fsm_slave_config_t *, ec_datagram_t *,
+void ec_fsm_slave_config_init(ec_fsm_slave_config_t *,
         ec_fsm_change_t *, ec_fsm_coe_t *, ec_fsm_soe_t *, ec_fsm_pdo_t *);
 void ec_fsm_slave_config_clear(ec_fsm_slave_config_t *);
 
 void ec_fsm_slave_config_start(ec_fsm_slave_config_t *, ec_slave_t *);
 void ec_fsm_slave_config_quick_start(ec_fsm_slave_config_t *, ec_slave_t *);
 
-int ec_fsm_slave_config_exec(ec_fsm_slave_config_t *);
+int ec_fsm_slave_config_exec(ec_fsm_slave_config_t *, ec_datagram_t *);
 int ec_fsm_slave_config_success(const ec_fsm_slave_config_t *);
 
 /*****************************************************************************/
diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -1358,7 +1358,7 @@ void ec_fsm_slave_scan_enter_preop(
         fsm->state = ec_fsm_slave_scan_state_preop;
         ec_slave_request_state(slave, EC_SLAVE_STATE_PREOP);
         ec_fsm_slave_config_start(fsm->fsm_slave_config, slave);
-        ec_fsm_slave_config_exec(fsm->fsm_slave_config);
+        ec_fsm_slave_config_exec(fsm->fsm_slave_config, fsm->datagram);
     } else {
         EC_SLAVE_DBG(slave, 1, "Reading mailbox"
                 " sync manager configuration.\n");
@@ -1381,7 +1381,7 @@ void ec_fsm_slave_scan_state_preop(
         ec_fsm_slave_scan_t *fsm /**< slave state machine */
         )
 {
-    if (ec_fsm_slave_config_exec(fsm->fsm_slave_config))
+    if (ec_fsm_slave_config_exec(fsm->fsm_slave_config, fsm->datagram))
         return;
 
     if (!ec_fsm_slave_config_success(fsm->fsm_slave_config)) {
