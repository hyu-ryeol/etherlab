From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Wed, 1 Jun 2016 10:04:49 +0200

Support for SDO complete access in SDO requests.

Adds ecrt_slave_config_create_sdo_request_complete.
Adds ecrt_sdo_request_index_complete.

diff --git a/include/ecrt.h b/include/ecrt.h
--- a/include/ecrt.h
+++ b/include/ecrt.h
@@ -1647,6 +1647,23 @@ ec_sdo_request_t *ecrt_slave_config_crea
         size_t size /**< Data size to reserve. */
         );
 
+/** Create an SDO request to exchange SDOs during realtime operation
+ *  using complete access.
+ *
+ * The created SDO request object is freed automatically when the master is
+ * released.
+ *
+ * This method has to be called in non-realtime context before
+ * ecrt_master_activate().
+ *
+ * \return New SDO request, or NULL on error.
+ */
+ec_sdo_request_t *ecrt_slave_config_create_sdo_request_complete(
+        ec_slave_config_t *sc, /**< Slave configuration. */
+        uint16_t index, /**< SDO index. */
+        size_t size /**< Data size to reserve. */
+        );
+
 /** Create an VoE handler to exchange vendor-specific data during realtime
  * operation.
  *
@@ -1836,7 +1853,9 @@ void ecrt_domain_state(
  * SDO request methods.
  ****************************************************************************/
 
-/** Set the SDO index and subindex.
+/** Set the SDO index and subindex and prepare for non-complete-access.
+ *
+ * This is valid even if the request was created for complete-access.
  *
  * \attention If the SDO index and/or subindex is changed while
  * ecrt_sdo_request_state() returns EC_REQUEST_BUSY, this may lead to
@@ -1848,6 +1867,18 @@ void ecrt_sdo_request_index(
         uint8_t subindex /**< SDO subindex. */
         );
 
+/** Set the SDO index and prepare for complete-access.
+ *
+ * This is valid even if the request was not created for complete-access.
+ *
+ * \attention If the SDO index is changed while ecrt_sdo_request_state()
+ * returns EC_REQUEST_BUSY, this may lead to unexpected results.
+ */
+void ecrt_sdo_request_index_complete(
+        ec_sdo_request_t *req, /**< SDO request. */
+        uint16_t index /**< SDO index. */
+        );
+
 /** Set the timeout for an SDO request.
  *
  * If the request cannot be processed in the specified time, if will be marked
diff --git a/lib/sdo_request.c b/lib/sdo_request.c
--- a/lib/sdo_request.c
+++ b/lib/sdo_request.c
@@ -64,6 +64,7 @@ void ecrt_sdo_request_index(ec_sdo_reque
     data.request_index = req->index;
     data.sdo_index = index;
     data.sdo_subindex = subindex;
+    data.complete_access = 0;
 
     ret = ioctl(req->config->master->fd, EC_IOCTL_SDO_REQUEST_INDEX, &data);
     if (EC_IOCTL_IS_ERROR(ret)) {
@@ -74,6 +75,26 @@ void ecrt_sdo_request_index(ec_sdo_reque
 
 /*****************************************************************************/
 
+void ecrt_sdo_request_index_complete(ec_sdo_request_t *req, uint16_t index)
+{
+    ec_ioctl_sdo_request_t data;
+    int ret;
+
+    data.config_index = req->config->index;
+    data.request_index = req->index;
+    data.sdo_index = index;
+    data.sdo_subindex = 0;
+    data.complete_access = 1;
+
+    ret = ioctl(req->config->master->fd, EC_IOCTL_SDO_REQUEST_INDEX, &data);
+    if (EC_IOCTL_IS_ERROR(ret)) {
+        EC_PRINT_ERR("Failed to set SDO request index: %s\n",
+                strerror(EC_IOCTL_ERRNO(ret)));
+    }
+}
+
+/*****************************************************************************/
+
 void ecrt_sdo_request_timeout(ec_sdo_request_t *req, uint32_t timeout)
 {
     ec_ioctl_sdo_request_t data;
diff --git a/lib/slave_config.c b/lib/slave_config.c
--- a/lib/slave_config.c
+++ b/lib/slave_config.c
@@ -598,6 +598,62 @@ ec_sdo_request_t *ecrt_slave_config_crea
     data.config_index = sc->index;
     data.sdo_index = index;
     data.sdo_subindex = subindex;
+    data.complete_access = 0;
+    data.size = size;
+
+    ret = ioctl(sc->master->fd, EC_IOCTL_SC_SDO_REQUEST, &data);
+    if (EC_IOCTL_IS_ERROR(ret)) {
+        EC_PRINT_ERR("Failed to create SDO request: %s\n",
+                strerror(EC_IOCTL_ERRNO(ret)));
+        ec_sdo_request_clear(req);
+        free(req);
+        return NULL;
+    }
+
+    req->next = NULL;
+    req->config = sc;
+    req->index = data.request_index;
+    req->sdo_index = data.sdo_index;
+    req->sdo_subindex = data.sdo_subindex;
+    req->data_size = size;
+    req->mem_size = size;
+
+    ec_slave_config_add_sdo_request(sc, req);
+
+    return req;
+}
+
+/*****************************************************************************/
+
+ec_sdo_request_t *ecrt_slave_config_create_sdo_request_complete(ec_slave_config_t *sc,
+        uint16_t index, size_t size)
+{
+    ec_ioctl_sdo_request_t data;
+    ec_sdo_request_t *req;
+    int ret;
+
+    req = malloc(sizeof(ec_sdo_request_t));
+    if (!req) {
+        EC_PRINT_ERR("Failed to allocate memory.\n");
+        return 0;
+    }
+
+    if (size) {
+        req->data = malloc(size);
+        if (!req->data) {
+            EC_PRINT_ERR("Failed to allocate %zu bytes of SDO data"
+                    " memory.\n", size);
+            free(req);
+            return 0;
+        }
+    } else {
+        req->data = NULL;
+    }
+
+    data.config_index = sc->index;
+    data.sdo_index = index;
+    data.sdo_subindex = 0;
+    data.complete_access = 1;
     data.size = size;
 
     ret = ioctl(sc->master->fd, EC_IOCTL_SC_SDO_REQUEST, &data);
diff --git a/master/ioctl.c b/master/ioctl.c
--- a/master/ioctl.c
+++ b/master/ioctl.c
@@ -3266,7 +3266,7 @@ static ATTRIBUTES int ec_ioctl_sc_create
     ec_lock_up(&master->master_sem); /** \todo sc could be invalidated */
 
     req = ecrt_slave_config_create_sdo_request_err(sc, data.sdo_index,
-            data.sdo_subindex, data.size);
+            data.sdo_subindex, data.complete_access, data.size);
     if (IS_ERR(req))
         return PTR_ERR(req);
 
@@ -3678,7 +3678,11 @@ static ATTRIBUTES int ec_ioctl_sdo_reque
         return -ENOENT;
     }
 
-    ecrt_sdo_request_index(req, data.sdo_index, data.sdo_subindex);
+    if (data.complete_access) {
+        ecrt_sdo_request_index_complete(req, data.sdo_index);
+    } else {
+        ecrt_sdo_request_index(req, data.sdo_index, data.sdo_subindex);
+    }
     return 0;
 }
 
diff --git a/master/ioctl.h b/master/ioctl.h
--- a/master/ioctl.h
+++ b/master/ioctl.h
@@ -759,6 +759,7 @@ typedef struct {
     uint32_t request_index;
     uint16_t sdo_index;
     uint8_t sdo_subindex;
+    uint8_t complete_access;
     size_t size;
     uint8_t *data;
     uint32_t timeout;
diff --git a/master/master.c b/master/master.c
--- a/master/master.c
+++ b/master/master.c
@@ -3393,14 +3393,13 @@ int ecrt_master_sdo_download_complete(ec
     }
 
     ec_sdo_request_init(&request);
-    ecrt_sdo_request_index(&request, index, 0);
+    ecrt_sdo_request_index_complete(&request, index);
     ret = ec_sdo_request_alloc(&request, data_size);
     if (ret) {
         ec_sdo_request_clear(&request);
         return ret;
     }
 
-    request.complete_access = 1;
     memcpy(request.data, data, data_size);
     request.data_size = data_size;
     ecrt_sdo_request_write(&request);
@@ -3558,8 +3557,7 @@ int ecrt_master_sdo_upload_complete(ec_m
             target, target_size, result_size, abort_code);
 
     ec_sdo_request_init(&request);
-    ecrt_sdo_request_index(&request, index, 0);
-    request.complete_access = 1;
+    ecrt_sdo_request_index_complete(&request, index);
     ecrt_sdo_request_read(&request);
 
     if (ec_lock_down_interruptible(&master->master_sem)) {
diff --git a/master/sdo_request.c b/master/sdo_request.c
--- a/master/sdo_request.c
+++ b/master/sdo_request.c
@@ -189,6 +189,14 @@ void ecrt_sdo_request_index(ec_sdo_reque
 {
     req->index = index;
     req->subindex = subindex;
+    req->complete_access = 0;
+}
+
+void ecrt_sdo_request_index_complete(ec_sdo_request_t *req, uint16_t index)
+{
+    req->index = index;
+    req->subindex = 0;
+    req->complete_access = 1;
 }
 
 /*****************************************************************************/
@@ -263,6 +271,7 @@ void ecrt_sdo_request_write_with_size(ec
 /** \cond */
 
 EXPORT_SYMBOL(ecrt_sdo_request_index);
+EXPORT_SYMBOL(ecrt_sdo_request_index_complete);
 EXPORT_SYMBOL(ecrt_sdo_request_timeout);
 EXPORT_SYMBOL(ecrt_sdo_request_data);
 EXPORT_SYMBOL(ecrt_sdo_request_data_size);
diff --git a/master/slave_config.c b/master/slave_config.c
--- a/master/slave_config.c
+++ b/master/slave_config.c
@@ -1090,8 +1090,7 @@ int ecrt_slave_config_complete_sdo(ec_sl
     }
 
     ec_sdo_request_init(req);
-    ecrt_sdo_request_index(req, index, 0);
-    req->complete_access = 1;
+    ecrt_sdo_request_index_complete(req, index);
 
     ret = ec_sdo_request_copy_data(req, data, size);
     if (ret < 0) {
@@ -1140,14 +1139,14 @@ int ecrt_slave_config_emerg_overruns(ec_
  * value.
  */
 ec_sdo_request_t *ecrt_slave_config_create_sdo_request_err(
-        ec_slave_config_t *sc, uint16_t index, uint8_t subindex, size_t size)
+        ec_slave_config_t *sc, uint16_t index, uint8_t subindex, uint8_t complete, size_t size)
 {
     ec_sdo_request_t *req;
     int ret;
 
     EC_CONFIG_DBG(sc, 1, "%s(sc = 0x%p, "
-            "index = 0x%04X, subindex = 0x%02X, size = %zu)\n",
-            __func__, sc, index, subindex, size);
+            "index = 0x%04X, subindex = 0x%02X, complete = %u, size = %zu)\n",
+            __func__, sc, index, subindex, complete, size);
 
     if (!(req = (ec_sdo_request_t *)
                 kmalloc(sizeof(ec_sdo_request_t), GFP_KERNEL))) {
@@ -1156,8 +1155,12 @@ ec_sdo_request_t *ecrt_slave_config_crea
     }
 
     ec_sdo_request_init(req);
-    ecrt_sdo_request_index(req, index, subindex);
-
+    if (complete) {
+        ecrt_sdo_request_index_complete(req, index);
+    }
+    else {
+        ecrt_sdo_request_index(req, index, subindex);
+    }
     ret = ec_sdo_request_alloc(req, size);
     if (ret < 0) {
         ec_sdo_request_clear(req);
@@ -1182,7 +1185,17 @@ ec_sdo_request_t *ecrt_slave_config_crea
         ec_slave_config_t *sc, uint16_t index, uint8_t subindex, size_t size)
 {
     ec_sdo_request_t *s = ecrt_slave_config_create_sdo_request_err(sc, index,
-            subindex, size);
+            subindex, 0, size);
+    return IS_ERR(s) ? NULL : s;
+}
+
+/*****************************************************************************/
+
+ec_sdo_request_t *ecrt_slave_config_create_sdo_request_complete(
+        ec_slave_config_t *sc, uint16_t index, size_t size)
+{
+    ec_sdo_request_t *s = ecrt_slave_config_create_sdo_request_err(sc, index,
+            0, 1, size);
     return IS_ERR(s) ? NULL : s;
 }
 
@@ -1372,6 +1385,7 @@ EXPORT_SYMBOL(ecrt_slave_config_emerg_po
 EXPORT_SYMBOL(ecrt_slave_config_emerg_clear);
 EXPORT_SYMBOL(ecrt_slave_config_emerg_overruns);
 EXPORT_SYMBOL(ecrt_slave_config_create_sdo_request);
+EXPORT_SYMBOL(ecrt_slave_config_create_sdo_request_complete);
 EXPORT_SYMBOL(ecrt_slave_config_create_voe_handler);
 EXPORT_SYMBOL(ecrt_slave_config_create_reg_request);
 EXPORT_SYMBOL(ecrt_slave_config_state);
diff --git a/master/slave_config.h b/master/slave_config.h
--- a/master/slave_config.h
+++ b/master/slave_config.h
@@ -177,7 +177,7 @@ ec_voe_handler_t *ec_slave_config_find_v
 void ec_slave_config_expire_disconnected_requests(ec_slave_config_t *);
 
 ec_sdo_request_t *ecrt_slave_config_create_sdo_request_err(
-        ec_slave_config_t *, uint16_t, uint8_t, size_t);
+        ec_slave_config_t *, uint16_t, uint8_t, uint8_t, size_t);
 ec_voe_handler_t *ecrt_slave_config_create_voe_handler_err(
         ec_slave_config_t *, size_t);
 ec_reg_request_t *ecrt_slave_config_create_reg_request_err(
