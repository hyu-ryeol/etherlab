From: Gavin Lambert <gavin.lambert@tomra.com>
Date: Fri Jul 19 14:09:15 2019 +1200

Some bugfixes for the e1000e driver in the stable patches.

diff --git a/devices/e1000e/netdev-4.4-ethercat.c b/devices/e1000e/netdev-4.4-ethercat.c
--- a/devices/e1000e/netdev-4.4-ethercat.c
+++ b/devices/e1000e/netdev-4.4-ethercat.c
@@ -4303,7 +4303,12 @@ void e1000e_down(struct e1000_adapter *a
 	 */
 	set_bit(__E1000_DOWN, &adapter->state);
 
-	netif_carrier_off(netdev);
+	if (adapter->ecdev) {
+		ecdev_set_link(adapter->ecdev, 0);
+	}
+	else {
+		netif_carrier_off(netdev);
+	}
 
 	/* disable receives in the hardware */
 	rctl = er32(RCTL);
@@ -4323,10 +4328,7 @@ void e1000e_down(struct e1000_adapter *a
 	e1e_flush();
 	usleep_range(10000, 20000);
 
-	if (adapter->ecdev) {
-		ecdev_set_link(adapter->ecdev, 0);
-	}
-	else {
+	if (!adapter->ecdev) {
 		e1000_irq_disable(adapter);
 
 		napi_synchronize(&adapter->napi);
@@ -5381,7 +5383,7 @@ link_up:
 	 * if there is queued Tx work it cannot be done.  So
 	 * reset the controller to flush the Tx packet buffers.
 	 */
-	if (!netif_carrier_ok(netdev) &&
+	if (!adapter->ecdev && !netif_carrier_ok(netdev) &&
 	    (e1000_desc_unused(tx_ring) + 1 < tx_ring->count))
 		adapter->flags |= FLAG_RESTART_NOW;
 
@@ -5945,21 +5947,21 @@ static netdev_tx_t e1000_xmit_frame(stru
 					(MAX_SKB_FRAGS *
 					 DIV_ROUND_UP(PAGE_SIZE,
 						 adapter->tx_fifo_limit) + 2));
-
-			if (!skb->xmit_more ||
-					netif_xmit_stopped(netdev_get_tx_queue(netdev, 0))) {
-				if (adapter->flags2 & FLAG2_PCIM2PCI_ARBITER_WA)
-					e1000e_update_tdt_wa(tx_ring,
-							tx_ring->next_to_use);
-				else
-					writel(tx_ring->next_to_use, tx_ring->tail);
-
-				/* we need this if more than one processor can write
-				 * to our tail at a time, it synchronizes IO on
-				 *IA64/Altix systems
-				 */
-				mmiowb();
-			}
+		}
+
+		if (!skb->xmit_more ||
+				netif_xmit_stopped(netdev_get_tx_queue(netdev, 0))) {
+			if (adapter->flags2 & FLAG2_PCIM2PCI_ARBITER_WA)
+				e1000e_update_tdt_wa(tx_ring,
+						tx_ring->next_to_use);
+			else
+				writel(tx_ring->next_to_use, tx_ring->tail);
+
+			/* we need this if more than one processor can write
+			 * to our tail at a time, it synchronizes IO on
+			 *IA64/Altix systems
+			 */
+			mmiowb();
 		}
 	} else {
 		if (!adapter->ecdev) {
