From: Knud Baastrup <kba@deif.com>
Date: Mon, 15 Sep 2014 13:47:18 +0200

Master locks to avoid corrupted datagram queue.

Added master lock for domain queing, domain processing, send and receive
which is likely to be called by more than one application task. The
missing lock can result in a corrupted datagram queue and "x datagrams
UNMATCHED!" warnings in syslog. It can be argued wether or not this
locking mechanism instead should have been implemented in the application
processes.

These locks are skipped for RTDM, as in this case Linux locks are both
harmful and insufficient; RTAI/Xenomai locks must be used instead if you
have multiple cyclic tasks.

diff --git a/master/ioctl.c b/master/ioctl.c
--- a/master/ioctl.c
+++ b/master/ioctl.c
@@ -57,6 +57,16 @@
 #define ATTRIBUTES
 #endif
 
+/** Ioctl locking is disabled for RTDM as the RT app needs to use RTAI locks.
+ */
+#ifdef EC_IOCTL_RTDM
+#define ec_ioctl_lock_down_interruptible(p) 0
+#define ec_ioctl_lock_up(p)                 do {} while (0)
+#else
+#define ec_ioctl_lock_down_interruptible(p) ec_lock_down_interruptible(p)
+#define ec_ioctl_lock_up(p)                 ec_lock_up(p)
+#endif
+
 /*****************************************************************************/
 
 /** Copies a string to an ioctl structure.
@@ -2036,8 +2046,15 @@ static ATTRIBUTES int ec_ioctl_send(
         return -EPERM;
     }
 
+    /* Locking added as send is likely to be used by more than
+        one application tasks */
+    if (ec_ioctl_lock_down_interruptible(&master->master_sem))
+        return -EINTR;
+
     sent_bytes = ecrt_master_send(master);
 
+    ec_ioctl_lock_up(&master->master_sem);
+
     if (copy_to_user((void __user *) arg, &sent_bytes, sizeof(sent_bytes))) {
         return -EFAULT;
     }
@@ -2061,7 +2078,14 @@ static ATTRIBUTES int ec_ioctl_receive(
         return -EPERM;
     }
 
+    /* Locking added as receive is likely to be used by more than
+       one application tasks */
+    if (ec_ioctl_lock_down_interruptible(&master->master_sem))
+        return -EINTR;
+
     ecrt_master_receive(master);
+
+    ec_ioctl_lock_up(&master->master_sem);
     return 0;
 }
 
@@ -3321,14 +3345,19 @@ static ATTRIBUTES int ec_ioctl_domain_pr
     if (unlikely(!ctx->requested))
         return -EPERM;
 
-    /* no locking of master_sem needed, because domain will not be deleted in
-     * the meantime. */
+    /* Locking added as domain processing is likely to be used by more than
+       one application tasks */
+    if (ec_ioctl_lock_down_interruptible(&master->master_sem)) {
+        return -EINTR;
+    }
 
     if (!(domain = ec_master_find_domain(master, (unsigned long) arg))) {
+        ec_ioctl_lock_up(&master->master_sem);
         return -ENOENT;
     }
 
     ecrt_domain_process(domain);
+    ec_ioctl_lock_up(&master->master_sem);
     return 0;
 }
 
@@ -3349,14 +3378,20 @@ static ATTRIBUTES int ec_ioctl_domain_qu
     if (unlikely(!ctx->requested))
         return -EPERM;
 
-    /* no locking of master_sem needed, because domain will not be deleted in
-     * the meantime. */
+    /* Locking added as domain queing is likely to be used by more than
+       one application tasks */
+    if (ec_ioctl_lock_down_interruptible(&master->master_sem))
+        return -EINTR;
 
     if (!(domain = ec_master_find_domain(master, (unsigned long) arg))) {
+        ec_ioctl_lock_up(&master->master_sem);
         return -ENOENT;
     }
 
     ecrt_domain_queue(domain);
+
+    ec_ioctl_lock_up(&master->master_sem);
+
     return 0;
 }
 
